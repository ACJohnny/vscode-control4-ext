[
  {
    "label": "RegistryDeleteValue",
    "signature": "C4:RegistryDeleteValue(key)",
    "description": "Removes a key/value pair from the Registry.",
    "documentation": null,
    "version": "2.10.4",
    "parameters": [
      {
        "type": "number",
        "name": "key",
        "description": "The key to be removed from the Registry"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "RegistryGetValue",
    "signature": "C4:RegistryGetValue(key)",
    "description": "Retrieves a value from the Registry.",
    "documentation": null,
    "version": "2.10.4",
    "parameters": [
      {
        "type": "number",
        "name": "key",
        "description": "The key applicable to the value being retrieved."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetVersionInfo",
    "signature": "C4:GetVersionInfo()",
    "description": "Function that returns the version of Director that is currently running. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "",
    "parameters": [],
    "returns": [
      {
        "type": "buildtime",
        "name": "buildtime",
        "description": "HH:MM:SS"
      },
      {
        "type": "builddate",
        "name": "builddate",
        "description": "mm dd yyyy"
      },
      {
        "type": "version",
        "name": "version",
        "description": "1.7.0.222"
      },
      {
        "type": "buildtype",
        "name": "buildtype",
        "description": "DEBUG"
      }
    ],
    "deprecated": false
  },
  {
    "label": "InvalidateState",
    "signature": "C4:InvalidateState()",
    "description": "Function to notify director that data from this driver has been modified and needs to be persisted. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "str data",
        "name": "str data",
        "description": "Data to encode."
      },
      {
        "type": "string",
        "name": "string",
        "description": "data_encoding: 'NONE' / â€˜HEX' / â€˜BASE64'"
      }
    ],
    "returns": [
      {
        "type": "single",
        "name": "return",
        "description": "result, err"
      }
    ],
    "deprecated": false
  },
  {
    "label": "Encode",
    "signature": "C4:Encode(data, data_encoding)",
    "description": "",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "str data",
        "name": "data",
        "description": "Data to encode."
      },
      {
        "type": "string",
        "name": "data_encoding",
        "description": "data_encoding: 'NONE' / â€˜HEX' / â€˜BASE64'"
      }
    ],
    "returns": [
      {
        "type": "single",
        "name": "return",
        "description": "result, err"
      }
    ],
    "deprecated": false
  },
  {
    "label": "Encrypt",
    "signature": "C4:Encrypt(cipher, key, iv, data, options)",
    "description": "",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "cipher",
        "description": "cipher: Valid cipher (see GetSupportedCiphers).     "
      },
      {
        "type": "string",
        "name": "key",
        "description": "key : Valid key for specified cipher. Short keys will be padded, long keys will be rejected."
      },
      {
        "type": "string",
        "name": "iv",
        "description": "iv: Valid IV for specified cipher. Short IVs will be padded (including empty/nil IVs), long IVs will be       rejected"
      },
      {
        "type": "string",
        "name": "data",
        "description": "data: Data to encrypt."
      },
      {
        "type": "table",
        "name": "options",
        "description": "Options: (Optional) Options to specify encoding of inputs and outputs"
      }
    ],
    "returns": [
      {
        "type": "single",
        "name": "return",
        "description": "result, err"
      }
    ],
    "deprecated": false
  },
  {
    "label": "Decode",
    "signature": "C4:Decode(data, data_encoding)",
    "description": "",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "data",
        "description": "Data to decode"
      },
      {
        "type": "string",
        "name": "data_encoding",
        "description": "data_encoding: string: 'NONE' / 'HEX' / 'BASE64â€™"
      }
    ],
    "returns": [
      {
        "type": "single",
        "name": "return",
        "description": "result, err"
      }
    ],
    "deprecated": false
  },
  {
    "label": "Decrypt",
    "signature": "C4:Decrypt(cipher, key, iv, data, options)",
    "description": "",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "cipher",
        "description": "Valid cipher (see GetSupportedCiphers).     "
      },
      {
        "type": "string",
        "name": "key",
        "description": "Valid key for specified cipher. Short keys will be padded, long keys will be rejected."
      },
      {
        "type": "string",
        "name": "iv",
        "description": "Valid IV for specified cipher. Short IVs will be padded (including empty/nil IVs), long IVs will be       rejected"
      },
      {
        "type": "string",
        "name": "data",
        "description": "Data to decrypt."
      },
      {
        "type": "table",
        "name": "options",
        "description": "Optional. Options to specify encoding of inputs and outputs:"
      }
    ],
    "returns": [
      {
        "type": "single",
        "name": "return",
        "description": "result, err"
      }
    ],
    "deprecated": false
  },
  {
    "label": "GenerateCSR_ECC",
    "signature": "C4:GenerateCSR_ECC(digest, curve, subject, tx509_exts)",
    "description": "This API will generate a certificate signing request (CSR) which, when sent to a certificate authority, will return a digital identity certificate that meets the encryption criteria defined by Elliptic-curve cryptography (ECC) standard. The use of this API assumes a thorough knowledge of public-key cryptosystems and the ECC cryptosystem definition.",
    "documentation": null,
    "version": "3.1.2",
    "parameters": [
      {
        "type": "digest",
        "name": "digest",
        "description": "The algorithm used by the certificate. For example, SHA256. See the C4:GetSupportedDigests()API       for information on retrieving digests."
      },
      {
        "type": "curve",
        "name": "curve",
        "description": "The elliptical curve encoding format for the certificate."
      },
      {
        "type": "subject",
        "name": "subject",
        "description": "The person, organization or device required by the certificate. For example:       \"/C=US/ST=Utah/L=SLC/O=Foo/OU=Controller Certificates/CN=foo.bar.com"
      },
      {
        "type": "tx509_exts",
        "name": "tx509_exts",
        "description": "Optional table of key/value pairs. Used in the event that the desired certificate contains X.509       encryption data."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GenerateCSR_RSA",
    "signature": "C4:GenerateCSR_RSA(digest, sizeCert, subject, tx509_exts)",
    "description": "This API will generate a certificate signing request (CSR) which, when sent to a certificate authority, will return a digital identity certificate that meets the encryption criteria defined by the Rivestâ€“Shamirâ€“Adleman (RSA) standard. The use of this API assumes a thorough knowledge of public-key cryptosystems and the RSA cryptosystem definition.",
    "documentation": null,
    "version": "3.1.2",
    "parameters": [
      {
        "type": "digest",
        "name": "digest",
        "description": "The algorithm used by the certificate. For example, SHA256. See the C4:GetSupportedDigests()API       for information on retrieving digests."
      },
      {
        "type": "sizeCert",
        "name": "sizeCert",
        "description": "The Key size of the certificate. For example, 2048."
      },
      {
        "type": "subject",
        "name": "subject",
        "description": "The person, organization or device required by the certificate."
      },
      {
        "type": "tx509_exts",
        "name": "tx509_exts",
        "description": "Optional table of key/value pairs. Used in the event that the desired certificate contains X.509       encryption data."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetSupportedCiphers",
    "signature": "C4:GetSupportedCiphers()",
    "description": "Returns the list of ciphers supported by the Encrypt and Decrypt functions.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "table",
        "name": "table",
        "description": "ciphers: Table of supported ciphers. Each element is a key/value pair, where the key is the cipher name       and the value is the list of parameters for that cipher."
      }
    ],
    "returns": [
      {
        "type": "single",
        "name": "return",
        "description": "ciphers"
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetSupportedDigests",
    "signature": "C4:GetSupportedDigests()",
    "description": "Returns the list of digests supported by the Hash, HMAC and PBKDF2 functions.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "digests: Table of supported digests. Each element is a key/value pair, where the key is the digest name       and the value is the list of parameters for that digest."
      }
    ],
    "deprecated": false
  },
  {
    "label": "Hash",
    "signature": "C4:Hash(digest, data, options)",
    "description": "Hashes a given string with the specified digest.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "digest",
        "description": "digest: Valid digest (see GetSupportedDigests).     "
      },
      {
        "type": "string",
        "name": "data",
        "description": "data: Data to hash."
      },
      {
        "type": "table",
        "name": "options",
        "description": "options: (Optional) Options to specify encoding of inputs and outputs:"
      }
    ],
    "returns": [
      {
        "type": "single",
        "name": "return",
        "description": "nil"
      }
    ],
    "deprecated": false
  },
  {
    "label": "HMAC",
    "signature": "C4:HMAC(digest, key, data, options)",
    "description": "Computes a hash-based message authentication code (HMAC) for a given string using the specified key.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "digest",
        "description": "digest: Valid digest (see GetSupportedDigests).     "
      },
      {
        "type": "string",
        "name": "key",
        "description": "key: Key to use for computing HMAC."
      },
      {
        "type": "string",
        "name": "data",
        "description": "data: Data to compute HMAC for."
      },
      {
        "type": "table",
        "name": "options",
        "description": "options: (Optional) Options to specify encoding of inputs and outputs:"
      }
    ],
    "returns": [
      {
        "type": "single",
        "name": "return",
        "description": "nil"
      }
    ],
    "deprecated": false
  },
  {
    "label": "LoadPKCS12",
    "signature": "C4:LoadPKCS12(filename, password)",
    "description": "Load a certificate and private key from a #PKCS12 file.The Lua PKCS #12 interface enables drivers to manage certificates and private keys using the PKCS #12file format. These files are encrypted and protected by a password. This ensures that cryptographic assets are secure and are not easily recovered.",
    "documentation": null,
    "version": "3.1.2",
    "parameters": [
      {
        "type": "string",
        "name": "filename",
        "description": "Path to the #PKCS12 file to load"
      },
      {
        "type": "string",
        "name": "password",
        "description": "The password for unlocking the file."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "PBKDF2",
    "signature": "C4:PBKDF2(digest, password, salt, iterations, key_length, options)",
    "description": "Performs a Password-Based Key Derivation Function 2 (PKCS#5) (PBKDF2) for a given password using the specified digest, salt, number of iterations and desired output key length.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "digest",
        "description": "digest: Valid digest (see GetSupportedDigests).     "
      },
      {
        "type": "string",
        "name": "password",
        "description": "password: Input password to generate PBKDF2 output for"
      },
      {
        "type": "string",
        "name": "salt",
        "description": "salt: Cryptographic salt to use"
      },
      {
        "type": "number",
        "name": "iterations",
        "description": "iterations: Number of iterations to run"
      },
      {
        "type": "number",
        "name": "key_length",
        "description": "key_length: Number of bytes to generate as output"
      },
      {
        "type": "table",
        "name": "options",
        "description": "options: (Optional) Options to specify encoding of inputs and outputs:"
      }
    ],
    "returns": [
      {
        "type": "single",
        "name": "return",
        "description": "result, err"
      }
    ],
    "deprecated": false
  },
  {
    "label": "Sign",
    "signature": "C4:Sign(operation, digest, key, data, [options])",
    "description": "Sign enables drivers to crypto-graphically sign an arbitrary payload using a specified key. The API currently supports both HMAC &amp; RSA signing. Control4 strongly recommends thatdriver developers implement this new API beginning with OS Release 3.1.0. This API is the best solution to cryptographically sign a payload. Control4 recommends its use rather than other Lua libraries.",
    "documentation": null,
    "version": "3.1.0",
    "parameters": [
      {
        "type": "string",
        "name": "operation",
        "description": "Specifies which signing operation to perform. Valid values are: HMAC: Use the HMAC       (hash-based message authentication code) signing algorithm. RSA: Use the RSA       (Rivest-Shamir-Adleman) signing algorithm."
      },
      {
        "type": "string",
        "name": "digest",
        "description": "Identifies which digest to use when signing. This can be one of the following values:       HMAC: Any supported hashing digest can be used. RSA: Must be one of       SHA1, SHA224, SHA256, SHA384, SHA512, MD5, MD5_SHA1, MD2, MD4, MDC2, or RIPEMD160."
      },
      {
        "type": "key",
        "name": "key",
        "description": "The key to use for signing. The key_encoding option identifies the format of the key (see       options below). HMAC: The key can be of any length, but cannot be empty. Control4       recommends that the size of the key be the same as the digest. For example, a 256-bit key for SHA256 or a       160-bit key for RIPEMD160. RSA: The key must be an RSA key that is valid for signing.       Note that RSA public keys are typically not valid for signing."
      },
      {
        "type": "data",
        "name": "data",
        "description": "The data to be signed. The data_encoding option identifies the format of the data (see       options below)."
      },
      {
        "type": null,
        "name": "options",
        "description": null
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "WritePKCS12",
    "signature": "C4:WritePKCS12(filename, password, certificate, key, label, options)",
    "description": "Writes a certificate and private key to a specified #PKCS12 file.The Lua PKCS #12 interface enables drivers to manage certificates and private keys using the PKCS #12file format. These files are encrypted and protected by a password. This ensures that cryptographic assets are secure and are not easily recovered.",
    "documentation": null,
    "version": "3.1.2",
    "parameters": [
      {
        "type": "string",
        "name": "filename",
        "description": "Path to the #PKCS12 file that will be created"
      },
      {
        "type": "string",
        "name": "password",
        "description": "The password for securing the file."
      },
      {
        "type": "string",
        "name": "certificate",
        "description": "The PEM-encoded certificate to be stored in the file."
      },
      {
        "type": "key",
        "name": "key",
        "description": "The PEM-encoded private key to be stored in the file."
      },
      {
        "type": "string",
        "name": "label",
        "description": "An optional string containing the label, or \"friendly name\"."
      },
      {
        "type": null,
        "name": "options",
        "description": null
      }
    ],
    "returns": [
      {
        "type": "single",
        "name": "return",
        "description": "true"
      }
    ],
    "deprecated": false
  },
  {
    "label": "AddEvent",
    "signature": "C4:AddEvent(num, str, str)",
    "description": "Function called from DriverWorks driver to add a new Event. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.8.0",
    "parameters": [
      {
        "type": "number",
        "name": "num",
        "description": "ID value of the Event"
      },
      {
        "type": "string",
        "name": "str",
        "description": "Event Name"
      },
      {
        "type": "string",
        "name": "str",
        "description": "Event Description where NAME is replaced by the driver name. See Event Description example below."
      }
    ],
    "returns": [
      {
        "type": "single",
        "name": "return",
        "description": "True or False"
      }
    ],
    "deprecated": false
  },
  {
    "label": "DeleteEvent",
    "signature": "C4:DeleteEvent(num)",
    "description": "Function called from DriverWorks driver to delete an Event. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.8.0",
    "parameters": [
      {
        "type": "number",
        "name": "num",
        "description": "ID value of the Event"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "FireEvent",
    "signature": "C4:FireEvent(strEvent)",
    "description": "Function called from DriverWorks driver to Fire a static or Dynamic Event on the driver. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.8.0",
    "parameters": [
      {
        "type": "string",
        "name": "strEvent",
        "description": "ID value of the Event Name"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "FireEventByID",
    "signature": "C4:FireEventByID(num)",
    "description": "Function called from DriverWorks driver to Fire a static or Dynamic Event (using the Event's ID Value) on the driver. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.8.0",
    "parameters": [
      {
        "type": "number",
        "name": "num",
        "description": "Event ID value of the Event"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "RegisterDeviceEvent",
    "signature": "C4:RegisterDeviceEvent(deviceId, eventId)",
    "description": "This API allows for a driver to register for another driver's event. The device ID passed is the ID of the device that is firing the event of interest. This is followed by the event ID.",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [
      {
        "type": "number",
        "name": "deviceId",
        "description": "Device ID value of the device firing the event"
      },
      {
        "type": "number",
        "name": "eventId",
        "description": "ID value of the Event"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "RegisterSystemEvent",
    "signature": "C4:RegisterSystemEvent(systemEventId, deviceId)",
    "description": "Creates a registration for a notification when a system event fires.",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [
      {
        "type": "number",
        "name": "eventID",
        "description": "ID value of the event. See System Event Table"
      },
      {
        "type": "number",
        "name": "deviceID",
        "description": "ID value of the device."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "UnregisterAllDeviceEvents",
    "signature": "C4:UnregisterAllDeviceEvents()",
    "description": "This API unregisters all prior event registrations created by the RegisterDeviceEvent API. ",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "UnregisterAllSystemEvents",
    "signature": "C4:UnregisterAllSystemEvents()",
    "description": "Un-registers from all notification of all system events.",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "UnregisterSystemEvent",
    "signature": "C4:UnregisterSystemEvent(eventId, deviceId)",
    "description": "Un-registers a notification when a system event fires.",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [
      {
        "type": "number",
        "name": "eventId",
        "description": "ID value of the event. See list below."
      },
      {
        "type": "number",
        "name": "deviceId",
        "description": "ID value of the device."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "UnregisterDeviceEvent",
    "signature": "C4:UnregisterDeviceEvent(deviceId, eventId)",
    "description": "This API unregisters prior event registration created by the RegisterDeviceEvent API. The device ID passed is the ID of the device that is firing the registered event. This is followed by the event ID.",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [
      {
        "type": "number",
        "name": "deviceId",
        "description": "Device ID value of the device firing the registered event."
      },
      {
        "type": "number",
        "name": "eventId",
        "description": "ID value of the Event"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "FileClose",
    "signature": "C4:FileClose(nFileHandle)",
    "description": "Used to close an opened file handle. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "nFileHandle",
        "description": "File handle"
      }
    ],
    "returns": [
      {
        "type": "bool",
        "name": "bool",
        "description": "True/False"
      }
    ],
    "deprecated": false
  },
  {
    "label": "FileDelete",
    "signature": "C4:FileDelete(strFileName)",
    "description": "Used to delete a file on the file system. This call will fail if there is a opened handle to the file. This function takes a file name to delete and returns a bool if the delete succeeded. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "strFileName",
        "description": "File name"
      }
    ],
    "returns": [
      {
        "type": "bool",
        "name": "bool",
        "description": "True/False"
      }
    ],
    "deprecated": false
  },
  {
    "label": "FileExists",
    "signature": "C4:FileExists(strFileName)",
    "description": "Used to see if a file exists on the file system. This function takes a file name and returns a bool if the file exists. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "strFileName",
        "description": "File name"
      }
    ],
    "returns": [
      {
        "type": "bool",
        "name": "bool",
        "description": "True/False"
      }
    ],
    "deprecated": false
  },
  {
    "label": "FileFreeSpace",
    "signature": "C4:FileFreeSpace()",
    "description": "Used to see how much free space exists on the file system in bytes. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [],
    "returns": [
      {
        "type": "number",
        "name": "",
        "description": "Free file space in bytes"
      }
    ],
    "deprecated": false
  },
  {
    "label": "FileIsValid",
    "signature": "C4:FileIsValid(nFileHandle)",
    "description": "Used to see if a file is still valid to be written or read from.This is useful to check before or after reading to see if an end of file condition has been reached.This function returns a bool of the file status. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "nFileHandle",
        "description": "File handle"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "",
        "description": "True or false"
      }
    ],
    "deprecated": false
  },
  {
    "label": "FileGetName",
    "signature": "C4:FileGetName(nFileHandle)",
    "description": "Used to get the name of an opened file handle. This function takes a file handle and returns a string of the file name.An empty string is returned if the file handle is not valid. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "nFileHandle",
        "description": "File handle"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "",
        "description": "Filename"
      }
    ],
    "deprecated": false
  },
  {
    "label": "FileGetPos",
    "signature": "C4:FileGetPos(nFileHandle)",
    "description": "Used to get the current read or write position for the file. This function takes a file handle and returns the current position. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "nFileHandle",
        "description": "File handle"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "",
        "description": "Position"
      }
    ],
    "deprecated": false
  },
  {
    "label": "FileGetSize",
    "signature": "C4:FileGetSize(nFileHandle)",
    "description": "File to get the current size of an opened file handle. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "nFileHandle",
        "description": "File handle"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "",
        "description": "File size in bytes"
      }
    ],
    "deprecated": false
  },
  {
    "label": "FileOpen",
    "signature": "C4:FileOpen(strFilename)",
    "description": "Used to open (if file exists) or create a new file. This function takes a file name, returns a handle. A value of -1 is returned if an error. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "strFilename",
        "description": "File name"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "",
        "description": "File handle"
      }
    ],
    "deprecated": false
  },
  {
    "label": "FileGetOpenedHandles",
    "signature": "C4:FileGetOpenedHandles()",
    "description": "Used to retrieve a table of all the opened file handles in your sandbox or nil if none are opened.The table is index = file handle and value=file name. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "Index= File handle"
      },
      {
        "type": "",
        "name": "",
        "description": "Value = File Name"
      }
    ],
    "deprecated": false
  },
  {
    "label": "FileList",
    "signature": "C4:FileList()",
    "description": "Used to retrieve a table of all the files that are present or nil if none exist. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "int",
        "name": "int",
        "description": "File handle"
      },
      {
        "type": "number",
        "name": "number",
        "description": "Number of bytes to be read."
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Read data or empty string"
      }
    ],
    "deprecated": false
  },
  {
    "label": "FileRead",
    "signature": "C4:FileRead(int, number)",
    "description": "Used to read data from a file. Returns an empty string if no bytes are read. This function takes a file handle and number of bytes to be read. If an end of file is reached with this read operation, a string of what data was read is returned and any subsequent calls to FileRead will return an empty string. Use the FileIsValid call to see if and end of file condition has been reached. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "int",
        "name": "int",
        "description": "File handle"
      },
      {
        "type": "number",
        "name": "number",
        "description": "Number of bytes to be read."
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Read data or empty string"
      }
    ],
    "deprecated": false
  },
  {
    "label": "FileSetPos",
    "signature": "C4:FileSetPos(int, number)",
    "description": "Used to set the position within the file to read or write from.This function takes a file handle and number for the new position. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "int",
        "name": "int",
        "description": "File handle"
      },
      {
        "type": "number",
        "name": "number",
        "description": "Number of position."
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "Number of bytes written or -1 if file is not valid."
      }
    ],
    "deprecated": false
  },
  {
    "label": "FileWrite",
    "signature": "C4:FileWrite(int, number, string)",
    "description": "Used to write data to a file. This function returns the number of bytes written or -1 if file is not valid (example file has been closed).This function takes a file handle, the number of bytes of the string to be written, and a string of data to be written. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "int",
        "name": "int",
        "description": "File handle"
      },
      {
        "type": "number",
        "name": "number",
        "description": "Number of bytes to be written."
      },
      {
        "type": "string",
        "name": "string",
        "description": "Data to be written"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "Number of bytes written or -1 if file is not valid."
      }
    ],
    "deprecated": false
  },
  {
    "label": "FileWriteString",
    "signature": "C4:FileWriteString(int, string)",
    "description": "Function to write a string to an opened file handle.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "int",
        "name": "int",
        "description": "File handle"
      },
      {
        "type": "string",
        "name": "string",
        "description": "String to be written"
      }
    ],
    "returns": [
      {
        "type": "int",
        "name": "int",
        "description": "Number of bytes written or -1 if there is an error."
      }
    ],
    "deprecated": false
  },
  {
    "label": "AddDevice",
    "signature": "C4:AddDevice(strDriverName, nRoomId, strNewName, fnCallback)",
    "description": "The AddDevice API provides the ability for a driver to add a device driver to a project. The ability to specify the location of the driver within the project as well as naming the device is also supported by the API.",
    "documentation": null,
    "version": "3.2.0",
    "parameters": [
      {
        "type": "string",
        "name": "strDriverName",
        "description": "Driver Name - Required. String of the driver name including the driver extension of .c4i or.c4z."
      },
      {
        "type": "number",
        "name": "nRoomId",
        "description": "Room ID - Optional. ID value of the room where the driver will reside."
      },
      {
        "type": "string",
        "name": "strNewName",
        "description": "New Driver Name - Optional. String of the new name of the driver."
      },
      {
        "type": "function",
        "name": "fnCallback",
        "description": "Callback Function - Required. A callback function must be passed as the last parameter. The callback       function can be any valid function name. In the example below, a function named OnDeviceAdded has been       created. In order to receive data from the AddDevice API, this function must reside in the driver. The       callback function takes two parameters: deviceId and, in the case of a Proxy Device, a table to contain       all of the IDs of the Proxy devices and the Protocol Driver's ID. See the example to the right."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "AddLocation",
    "signature": "C4:AddLocation ()",
    "description": "The AddLocation API provides the ability for a driver to add a location to a project. The locations that can be added are those available in a Control4 project. This includes:",
    "documentation": null,
    "version": "3.2.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "ParentID Number - This parameter is the device id of the location (Site, Building, Floor) where the new       location is to be added. For example, if adding a new building to a project, this parameter would be the       Site ID. If adding a new room to a project, this parameter would be the Floor ID."
      },
      {
        "type": "string",
        "name": "string",
        "description": "Name of Location - This parameter is a string value representing the name that will be used for the       newly added location. For example: \"New Main Floor\" or \"Master Bathroom\". The string passed in this       parameter will be displayed in the ComposerPro project tree."
      },
      {
        "type": "string",
        "name": "string",
        "description": "Type of Location - This parameter is a string value that defines the type of location being added.       Acceptable values include: SITE, BUILDING, FLOOR or ROOM."
      },
      {
        "type": "string",
        "name": "string",
        "description": "Image - This is an optional parameter that provides the ability to use a different image for the       location. Valid images are based on the Type of Location. Available images are those images visible in       ComposerPro. See Example 4. below for more information."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Bind",
    "signature": "C4:Bind(idDeviceProvider, idBindingProvider, idDeviceConsumer, idBindingConsumer, strClass)",
    "description": "Note the order of the parameters passed in the Bind API. Each has a \"Provider\" and \"Consumer\" designation. The Provider designation represents the Device ID value of the device providing the data within the binding. To verify if a device driver is a Provider, go to the driver's &lt;Connections&gt; XML.This API provides the ability to create a binding between two devices: a \"Provider Device\" and a \"Consumer Device.\" The binding creation through this API is the same as manually creating a binding in ComposerPro's The &lt;consumer&gt; XML tag for this device's driver will be False or: &lt;consumer&gt;False&lt;/consumer&gt;. Subsequently, the Provider Binding ID value is the Provider device's binding value.",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [
      {
        "type": "idDeviceProvider",
        "name": "idDeviceProvider",
        "description": "ID value of the device providing data."
      },
      {
        "type": "idBindingProvider",
        "name": "idBindingProvider",
        "description": "Binding ID value of the binding for the Provider Device"
      },
      {
        "type": "idDeviceConsumer",
        "name": "idDeviceConsumer",
        "description": "ID value of the device consuming data."
      },
      {
        "type": "Class",
        "name": "idBindingConsumer",
        "description": "String. The binding connection class."
      },
      {
        "type": null,
        "name": "strClass",
        "description": null
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "blowfishEcbDecrypt",
    "signature": "C4:blowfishEcbEncrypt()",
    "description": "Function to decrypt using Blowfish in ECB mode. ECB mode operates on exactly 64 bits (8 bytes) of data. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "Encrypted data"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "De-encrypted data."
      }
    ],
    "deprecated": false
  },
  {
    "label": "blowfishEcbEncrypt",
    "signature": "C4:blowfishEcbEncrypt()",
    "description": "Function to encrypt using Blowfish in ECB mode. ECB mode operates on exactly 64 bits (8 bytes) of data. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "De-encrypted data."
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Encrypted data."
      }
    ],
    "deprecated": false
  },
  {
    "label": "CallAsync",
    "signature": "C4:CallAsync()",
    "description": "API that makes calling functions asynchronously much easier. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "Function to be called asynchronously."
      }
    ],
    "returns": [
      {
        "type": "single",
        "name": "return",
        "description": "True or False"
      }
    ],
    "deprecated": false
  },
  {
    "label": "EvaluateExpression",
    "signature": "C4:EvaluateExpression(logic, value1, value2)",
    "description": "EvaluateConditional evaluates the expression and returns a Boolean result. This API has 3 parameters, a logic operator and two operands. â€˜value1â€™ is the left operand and â€˜value2â€™ is the right operand. ",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "logic",
        "name": "logic",
        "description": "Operator used in the conditionals. The following strings are accepted:"
      },
      {
        "type": "",
        "name": "value1",
        "description": "EQUAL"
      },
      {
        "type": "",
        "name": "value2",
        "description": "NOT_EQUAL"
      },
      {
        "type": "",
        "name": "",
        "description": "LESS_THAN"
      },
      {
        "type": "",
        "name": "",
        "description": "GREATER_THAN"
      },
      {
        "type": "",
        "name": "",
        "description": "GREATER_THAN_OR_EQUAL"
      },
      {
        "type": "value 1",
        "name": "value 1",
        "description": "Left operand of the expression"
      },
      {
        "type": "value 2",
        "name": "value 2",
        "description": "Right operand of the expression"
      }
    ],
    "returns": [
      {
        "type": "single",
        "name": "return",
        "description": "True or False"
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetC4iDir",
    "signature": "C4:GetC4iDir()",
    "description": "Function that will return the directory path on the controller where driver.c4i files reside.",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Directory path."
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetC4zDir",
    "signature": "C4:GetC4zDir()",
    "description": "Function that will return the directory path on the controller where driver.c4z files reside.",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Directory path."
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetLogDir",
    "signature": "C4:GetLogDir()",
    "description": "Function that will return the directory path on the controller where log files reside.",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Directory path."
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetTimeZone",
    "signature": "C4:GetTimeZone ()",
    "description": "Returns the Project's current Time Zone in the form of a LUA string. If there is no Time Zone set for the project, such as in the case of an unidentified controller, an empty string is returned.",
    "documentation": null,
    "version": "3.0.0",
    "parameters": [],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Time Zone in a string format."
      }
    ],
    "deprecated": false
  },
  {
    "label": "ParseXML",
    "signature": "C4:ParseXml(str)",
    "description": "Helper function which turns a XML document into a .lua table of parsed XML data. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.7.0",
    "parameters": [
      {
        "type": "string",
        "name": "str",
        "description": "XML in string format"
      }
    ],
    "returns": [
      {
        "type": "Table",
        "name": "Table",
        "description": "Lua Table."
      }
    ],
    "deprecated": false
  },
  {
    "label": "RecordHistory",
    "signature": "C4:RecordHistory(severity, eventType, category, subcategory, description)",
    "description": "Helper Function that writes history events to the History Agent database. ",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "severity",
        "description": "Severity: Valid parameters include: â€œCriticalâ€, â€œWarningâ€, or â€œInfo\""
      },
      {
        "type": "string",
        "name": "eventType",
        "description": "eventType: Describes the type of event within a category. Each category would define specific types of       history event. For example, the Security category could define the following event types: Arm, Disarm,       Open, Close, Alarm, etc."
      },
      {
        "type": "string",
        "name": "category",
        "description": "Category: Represents the high level logical group that the device or source belongs to. These categories       may correlate to Navigator categories, but could include additional categories. For example: Security,       Lighting, Comfort, System etc."
      },
      {
        "type": "string",
        "name": "subcategory",
        "description": "Subcategory: An optional subcategory can be included. The sub category provides additional event       criteria that may be used to query for events."
      },
      {
        "type": "string",
        "name": "description",
        "description": "Description: Brief description."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "tohex",
    "signature": "C4:tohex(strHex)",
    "description": "Function called from DriverWorks driver to convert a text string of hex into a string with hex values in it. Typically used when a protocol sends commands that are hex values. Note that for convenience, the print function can be called without prefacing with C4: This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "strHex",
        "description": "Text to convert to binary hex."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "ToStringLocaleC",
    "signature": "C4:ToStringLocaleC (num)",
    "description": "String helper function to convert a number to a string using the â€˜Câ€™ locale regardless of the locale setting of the Control4 Operating System. Some countries use commas instead of decimal points for floating point numbers. Lua â€˜tostringâ€™ command and string concatenation (..) with a number variable will convert the decimal value from a decimal point to a comma in some countries (locales). There may be instances where you do not want this conversion to take place and want the floating-point number to always be represented using a decimal point as opposed to a comma. In these cases, the C4:ToStringLocaleC(num) command can be used to convert the number to a string using decimal points.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "num",
        "description": "The number to convert (may be a floating-point number)"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "unbind",
    "signature": "C4:Unbind(idDeviceConsumer, idBindingConsumer)",
    "description": "This API provides the ability to unbind bound devices. The unbinding of the devices binding through this API is the same as manually unbinding two devices in ComposerPro's Connections area. Note the parameters passed in the API. Both have \"Consumer\" designation. These parameters represent the device that consumes data from the Provider device. To verify if a device driver is a Consumer, go to the driver's &lt;Connections&gt; XML. The &lt;consumer&gt; XML tag for this device's driver will be True or: &lt;consumer&gt;True&lt;/consumer&gt;. Subsequently, the Consumer Binding ID value is the Consumer device's binding value.",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [
      {
        "type": "number",
        "name": "idDeviceConsumer",
        "description": "idDeviceConsumer - ID value of the device consuming data."
      },
      {
        "type": "number",
        "name": "idBindingConsumer",
        "description": "idBindingConsumer - Binding ID value of the binding for the Consumer Device"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "XmlEscapeString",
    "signature": "C4:XmlEscapeString(strRawInput)",
    "description": "\"Escapes\" the passed in string rendering any XML characters (only &amp;, &lt;, and &gt;) in the string as characters that are valid in an XML value. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "strRawInput",
        "description": "strRawInput: Raw input string, with possibly invalid characters for an XML value."
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "strEscaped: The passed in string, with all XML characters properly escaped."
      }
    ],
    "deprecated": false
  },
  {
    "label": "SendIR",
    "signature": "C4:SendIR(idBinding,idIRCode)",
    "description": "Function called from DriverWorks driver to send an IR Code. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "idBinding: IR Binding ID to send the IR Code."
      },
      {
        "type": "number",
        "name": "idIRCode",
        "description": "idIRCode: ID of the IR Code to send from .c4i"
      },
      {
        "type": "number",
        "name": "number",
        "description": "idBinding:Proxy Binding ID. (optional)"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SendIRStart",
    "signature": "C4:SendIRStart(idBinding, idBinding, idIRCode)",
    "description": "Causes Director to start sending the specified IR Code out the specified binding. This is typically used on button press events. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "idBinding: Proxy Binding ID."
      },
      {
        "type": "number",
        "name": "idBinding",
        "description": "idBinding: Binding ID to send the IR Code."
      },
      {
        "type": "number",
        "name": "idIRCode",
        "description": "idIRCode: Id of the IR Code to start sending from the driver."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SendIRStop",
    "signature": "C4:SendIRStop(idBinding,idBinding, idIRCode)",
    "description": "Causes Director to stop sending the specified IR Code out the specified binding. This is typically used on button release events. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "idBinding: Proxy Binding ID."
      },
      {
        "type": "number",
        "name": "idBinding",
        "description": "idBinding: Binding ID to send the IR Code."
      },
      {
        "type": "number",
        "name": "idIRCode",
        "description": "idIRCode: Id of the IR Code to start sending from the driver file."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "JsonEncode",
    "signature": "C4:JsonEncode(json, formatted, encodeArray, symmetric)",
    "description": "JSON function that takes the data in the Lua tCommand table and encodes it into a JSON formatted command string representing a Lua object. On success, this function returns a single value which is as designed. On failure, the function returns two values:",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "value",
        "name": "json",
        "description": "The Lua object to be encoded. Must be one of the following types: number, string, boolean, table. Tables       can contain any combination of types (including nested tables) provided that all items are one of the       following types: number string, boolean. Note that c4:JsonEncode will fail if any table (or nested table)       contains any of the following types: lightuserdata, userdata, function, thread."
      },
      {
        "type": "formatted",
        "name": "formatted",
        "description": "Optional. A boolean flag value indicating whether the resulting JSPN string is formatted using newlines       and indentations. The default value is False when omitted."
      },
      {
        "type": "encodeArrays",
        "name": "encodeArrays",
        "description": "Optional. A boolean flag value indicating whether the tables are encoded as JSON arrays. The default       value is False when omitted."
      },
      {
        "type": "symmetric",
        "name": "symmetric",
        "description": "Optional. A boolean flag value indicating whether the resulting JSON objects consist of name/value pairs       in which the name must be a string (i.e, double quotes)."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "JsonDecode",
    "signature": "C4:JsonDecode(json, decodeNull)",
    "description": "JSON function that takes data from the JSON formatted string message and decodes it into the Lua table. On success, this function returns a single value which is as designed. On failure, the function returns two values:",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "json",
        "name": "json",
        "description": "A string containing the JSON to be decoded.An error will be raised if the string contains invalid JSON.       The actual value returned depends on the value of the json parameter and can be any of the following:       Number, String, Boolean, Table"
      },
      {
        "type": "decodeNull",
        "name": "decodeNull",
        "description": "Optional. Boolean flag value indicating how null values are decoded. By default (false), null values are       converted to an empty table. A value of true specifies that null values are decoded as a lightuserdata       object with a value of null."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "ErrorLog",
    "signature": "C4:ErrorLog(strLogText)",
    "description": "Function called from DriverWorks driver to send messages to the following log files: director.log and driver.log.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "bool",
        "name": "strLogText",
        "description": "flush: Value that indicates whether any queued-up write requests should be sent out prior to closing the       connection."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "CreateTCPClient",
    "signature": "C4:Close(flush)",
    "description": "Generally, the class cleans up any resources associated with it. For example, when the object is no longer referenced, it will cleans it up. However, there are a few exceptions: When the class is performing an asynchronous operation, e.g. a connect request, it will remain alive until the appropriate event callback function is called. For instance, if you call the Connect() method, the class will remain alive until it either called the OnConnect (and OnResolve) callback function, or the OnError callback function, even if your lua code does not have any reference to the class during that time period. The same applies to the time period between calling one of the Read() methods and the corresponding OnRead() or OnError() callback, and in between calling the Write() method and the OnWrite() or OnError() callback. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "bool",
        "name": "flush",
        "description": "flush: Value that indicates whether any queued-up write requests should be sent out prior to closing the       connection."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Close",
    "signature": "C4:Close(flush)",
    "description": "This method closes an established connection, or cancels a pending resolve or connection request. If a resolve or connection request is canceled, the OnError callback function will get called. This API should not be invoked during OnDriverInit. Once you call this method, no more data will be read from the socket and you can no longer write additional data to the socket. Also, the OnWrite callback will not be called anymore, even if the flush argument is set to true.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "bool",
        "name": "flush",
        "description": "flush: Value that indicates whether any queued-up write requests should be sent out prior to closing the       connection."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Connect",
    "signature": "C4:Connect(host, service)",
    "description": "This method initiates a connection request to a host and service/port. If a connection request is already in progress, this function returns nil. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "host",
        "name": "host",
        "description": "IP address or host name to connect to. It can also be one of these special values: \"!local\" or       \"!loopback\" Connect over the loopback device service is the port number or a string with the service (e.g.       80 or \"http\")."
      },
      {
        "type": null,
        "name": "service",
        "description": null
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetLocalAddress",
    "signature": "C4:GetLocalAddress()",
    "description": "This method returns a table with the IP address and port of the local endpoint.This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "IP address of the local endpoint"
      },
      {
        "type": "",
        "name": "",
        "description": "Port number of the local endpoint"
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetRemoteAddress",
    "signature": "C4:GetRemoteAddress()",
    "description": "This method returns a table with the IP address and port of the remote endpoint.This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "IP address of the remote endpoint"
      },
      {
        "type": "",
        "name": "",
        "description": "Port number of the remote endpoint"
      }
    ],
    "deprecated": false
  },
  {
    "label": "OnConnect",
    "signature": "C4:OnConnect(func)",
    "description": "This method sets a callback method that will be called once the endpoint has been chosen and the connection is successfully established.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "function",
        "name": "func",
        "description": "Function should have this function signature: function(client). The client is this C4LuaTCPClient       instance"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "OnDisconnect",
    "signature": "C4:OnDisconnect(func)",
    "description": "This method sets a callback method that will be called when the client gets disconnected.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "function",
        "name": "func",
        "description": "Function should have this function signature: function (client, errCode, errMsg)"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "OnError",
    "signature": "C4:OnError(func)",
    "description": "This method sets a callback method that will be called when an error happens during an asynchronous operation.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "function",
        "name": "func",
        "description": "Function should have this function signature: function (server, code, msg)"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "OnRead",
    "signature": "C4:OnRead(func)",
    "description": "This method sets a callback method that will be called once data has been read on the socket. If you would like to keep reading more data, you should call one of the Read() methods prior to returning from this callback function.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "function",
        "name": "func",
        "description": "Function should have this function signature: function (client, data)"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "OnResolve",
    "signature": "C4:OnResolve(func)",
    "description": "This method sets a callback method that is called once the host/service has been resolved. If implemented, it allows you to choose a particular endpoint to connect to, or to cancel the connection request.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "function",
        "name": "func",
        "description": "Function should have this function signature: function(client, endpoints, choose)"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Option",
    "signature": "C4:Option(name, value[, ...])",
    "description": "This method sets a socket option. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "name",
        "description": "Name is a string specifying the option to set. It can be one of the following:"
      },
      {
        "type": "",
        "name": "value",
        "description": "â€keepalive\": Enables or disables the socket's keep-alive option based on the boolean value supplied in       the value argument."
      },
      {
        "type": "",
        "name": "...",
        "description": "â€nodelay\": Enables or disables the socket's no-delay option based on the boolean value supplied in the       value argument."
      },
      {
        "type": "",
        "name": "",
        "description": "â€linger\": Enables or disables the sockets' linger option based on the boolean value supplied in the       value argument. This option requires a 3rd argument of type number that indicates the timeout period       (in seconds)."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "ReadAtLeast",
    "signature": "C4:ReadAtLeast(min)",
    "description": "This method requests to read at least as many bytes as specified by the min argument.Once at least this amount of data is available, all available data is passed to the OnRead callback. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "min",
        "description": "Number and must be greater than 0 and is currently limited to 1024 kb"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "ReadUntil",
    "signature": "C4:ReadUntil(arg)",
    "description": "This method requests to read data until a specific condition is met. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "arg",
        "name": "arg",
        "description": "arg can be a string, in which case the read request will be satisfied until this string was read from       the socket. arg can also be a function, which can arbitrarily decide at what point the read request       is satisfied:"
      },
      {
        "type": "arg (str)",
        "name": "arg (str)",
        "description": "All data until (and including) the value of this argument will be passed to the OnRead() callback."
      },
      {
        "type": "arg (function)",
        "name": "arg (function)",
        "description": "The supplied function should have the following signature: function(data)."
      }
    ],
    "returns": [
      {
        "type": "bool",
        "name": "bool",
        "description": "indicates whether the matching condition to satisfy the read request was fulfilled"
      },
      {
        "type": "number",
        "name": "number",
        "description": "bytes that should be removed from the front of the read buffer, regardless of whether the condition is       fulfilled. You should return a value if you returned true as first return value, otherwise the entire data       will be discarded."
      },
      {
        "type": "",
        "name": "",
        "description": "The third return value is optional, and if not nil, will be used to replace the data argument of the OnRead callback handler. This       is useful if the matching process is already rather expensive (e.g. parsing an XML document), as it allows       you to transfer that information directly to the OnRead() callback handler without having to do the same       work again."
      }
    ],
    "deprecated": false
  },
  {
    "label": "ReadUntilOneOf",
    "signature": "C4:ReadUntilOneOf(str)",
    "description": "This method requests to read data until (and including) one of the bytes in the str argument is encountered. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "str",
        "description": "string with all bytes that can trigger a match. This argument cannot be an empty string."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "ReadUntilOneNotOf",
    "signature": "C4:ReadUntilOneNotOf(str)",
    "description": "This method requests to read data until (and including) any byte that is not in the str argument is encountered. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "str",
        "description": "string with all bytes that can trigger a match. This argument cannot be an empty string."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "ReadUpTo",
    "signature": "C4:ReadUpTo(max)",
    "description": "This method requests to read any available data up to (and including) the number of bytes specified by the max argument. Once data is available, the OnRead callback will be called with whatever data was available, but no more than the limit specified in the max argument. This API should not be invoked during OnDriverInit",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "max",
        "description": "max is a number and must be greater than 0 and it is currently limited to 4096 kb"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Close",
    "signature": "C4:Close()",
    "description": "This method stops the server socket, or cancels pending resolve or endpoint selection. If a pending resolve or endpoint selection was canceled, the OnError handler will be called. However, if the server is already accepting connections, the OnError handler will NOT be called and the server simply ceases to accept further connection requests. Note that the server does not manage accepted client connections and will not close any of these connections. it it is up to your implementation to manage client connections and how to act when you stop the TCP server.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetLocalAddress",
    "signature": "C4:GetLocalAddress()",
    "description": "This method returns a table with the IP address and port that the server is listening on.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "IP address that the server is listening on"
      },
      {
        "type": "port",
        "name": "port",
        "description": "number that the server is listening on"
      }
    ],
    "deprecated": false
  },
  {
    "label": "Listen",
    "signature": "C4:Listen(host, service[, backlog])",
    "description": "This method starts a listen request to listen on a particular host/service. Once the host/service has been resolved and an endpoint has been chosen, the OnListen callback function will be called. This indicates that the server is now ready to accept incoming connections. If errors occur, the OnError callback function will be called instead. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "host",
        "name": "host",
        "description": "IP address or host name to listen on. It can also be one of these special values:       â€œ*\", \"!all\", or \"!anyâ€"
      },
      {
        "type": "â€!local\" or \"!loopback\"",
        "name": "service",
        "description": "Listens on the loopback device"
      },
      {
        "type": "service",
        "name": "backlog",
        "description": "port number or a string with the service (e.g. 80 or \"http\"). If this argument is 0, a random       available port will be"
      },
      {
        "type": "chosen.",
        "name": "chosen.",
        "description": ""
      },
      {
        "type": "backlog",
        "name": "backlog",
        "description": "number indicating the size of the connection accept backlog.This argument is optional"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "OnAccept",
    "signature": "C4:OnAccept(func)",
    "description": "This method sets a callback method that will be called whenever a new client connection has been accepted by the TCP server.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "function",
        "name": "func",
        "description": "should have this function signature: function(server, client)"
      },
      {
        "type": "server",
        "name": "server",
        "description": "server is this C4LuaTCPServer instance"
      },
      {
        "type": "client",
        "name": "client",
        "description": "server is this C4LuaTCPServer instance"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "OnError",
    "signature": "C4:OnError(func)",
    "description": "This method sets a callback method that will be called when an error occurs during an asynchronous operation.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "function",
        "name": "func",
        "description": "should have this function signature: function(server, code, msg)"
      },
      {
        "type": "code",
        "name": "code",
        "description": "number with the system error code"
      },
      {
        "type": "msg",
        "name": "msg",
        "description": "string with a description of the error"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "OnListen",
    "signature": "C4:OnListen(func)",
    "description": "This method sets a callback method that will be called once the TCP server starts listening. This callback is called once the host/service has been resolved and the endpoints has been chosen. It is optional to implement this callback method.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "function",
        "name": "func",
        "description": "should have this function signature: function (server, endpoint)"
      },
      {
        "type": "server",
        "name": "server",
        "description": "This C4LuaTCPServer instance"
      },
      {
        "type": "endpoint",
        "name": "endpoint",
        "description": "Table with the following fields indicating the endpoint the server is listening on:"
      },
      {
        "type": "",
        "name": "",
        "description": "ip (string)"
      },
      {
        "type": "",
        "name": "",
        "description": "port (number) The port number the server is listening on"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "OnResolve",
    "signature": "C4:OnResolve(func)",
    "description": "This method sets a callback method that will be called once the host/service has been resolved. If implemented, it allows you to choose a particular endpoint to listen on, or to cancel the listen request.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "function",
        "name": "func",
        "description": "should have this function signature: function (server, endpoints, choose)"
      },
      {
        "type": "server",
        "name": "server",
        "description": "This C4LuaTCPServer instance"
      },
      {
        "type": "endpoints",
        "name": "endpoints",
        "description": "Array of tables describing all endpoints that the host/service could be resolved to. Each entry has the       following:"
      },
      {
        "type": "",
        "name": "",
        "description": "ip (string) The IP address the server is listening on"
      },
      {
        "type": "",
        "name": "",
        "description": "port (number) The port number the server is listening on"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Option",
    "signature": "C4:Option(name, value[, ...])",
    "description": "This method sets a socket option.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "name",
        "name": "name",
        "description": "string specifying the option to set.It can be one of the following:"
      },
      {
        "type": "",
        "name": "value",
        "description": "â€reuseaddr\" Enables or disables the socket's reuse address option based on the boolean value supplied in       the value argument."
      },
      {
        "type": "",
        "name": "...",
        "description": "â€linger\": Enables or disables the sockets' linger option based on the boolean value supplied in the       value argument. This option requires a 3rd argument of type number that indicates the timeout period       (in seconds)."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Overview",
    "signature": "C4:MediaAddAlbumInfo ()",
    "description": "The examples used in the Albums section of this document will reference the following albums:",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "title"
      },
      {
        "type": "table",
        "name": "table",
        "description": "Songs information is required. Table must contain the songs you want added to the album."
      },
      {
        "type": "data",
        "name": "data",
        "description": "Data from MediaGetSongInfo: required fields are: title, location, track_no unique for that       table"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "The new Media ID for the movie"
      }
    ],
    "deprecated": false
  },
  {
    "label": "MediaAddAlbumInfo",
    "signature": "C4:MediaAddAlbumInfo ()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "title"
      },
      {
        "type": "table",
        "name": "table",
        "description": "Songs information is required. Table must contain the songs you want added to the album."
      },
      {
        "type": "data",
        "name": "data",
        "description": "Data from MediaGetSongInfo: required fields are: title, location, track_no unique for that       table"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "The new Media ID for the movie"
      }
    ],
    "deprecated": false
  },
  {
    "label": "MediaGetAlbumInfo",
    "signature": "C4:MediaGetAlbumInfo",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "This is the Media ID of the album."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaGetAlbumLocation",
    "signature": "C4:MediaGetAlbumLocations()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "The Media ID of the album."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaGetAllAlbums",
    "signature": "C4:MediaGetAllAlbums()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "Table",
        "name": "Table",
        "description": "Table containing Media IDs and locations."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaRemoveAlbum",
    "signature": "C4:MediaRemoveAlbum()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "The Media ID of the album. Note, all songs associated with this album will be removed as well."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaRemoveAllAlbums",
    "signature": "C4:MediaRemoveAllAlbums()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "media ID"
      },
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "name"
      },
      {
        "type": "table",
        "name": "table",
        "description": "Song information is required. Table must contain the songs you want added to the album."
      },
      {
        "type": "",
        "name": "",
        "description": "Song Table info: data from MediaGetSongInfo. Required fields are title, location and track number unique       for that table."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaModifyAlbumInfo",
    "signature": "C4:MediaModifyAlbumInfo()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "media ID"
      },
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "name"
      },
      {
        "type": "table",
        "name": "table",
        "description": "Song information is required. Table must contain the songs you want added to the album."
      },
      {
        "type": "",
        "name": "",
        "description": "Song Table info: data from MediaGetSongInfo. Required fields are title, location and track number unique       for that table."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaAddBroadcastVideoInfo",
    "signature": "C4:MediaAddBroadcastVideoInfo()",
    "description": "This function is used to add a new broadcast video station media entry. This API should not be invoked during OnDriverInit. ",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "title"
      },
      {
        "type": "table",
        "name": "table",
        "description": "The table will have key of the media id and the stations locations as the values"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "The new Media ID for the station"
      }
    ],
    "deprecated": false
  },
  {
    "label": "MediaGetAllBroadcastVideo",
    "signature": "C4:MediaGetAllBroadcastVideo()",
    "description": "This function is used to retrieve all the broadcast video stations associated with this device. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "Table",
        "name": "Table",
        "description": "Table containing Media IDs and the stations locations as the values."
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "genre"
      },
      {
        "type": "string",
        "name": "string",
        "description": "description"
      },
      {
        "type": "string",
        "name": "string",
        "description": "name"
      },
      {
        "type": "string",
        "name": "string",
        "description": "image. this is a base64 encoded JPEG file of the cover art."
      }
    ],
    "deprecated": false
  },
  {
    "label": "MediaGetBroadcastVideoInfo",
    "signature": "C4:MediaGetBroadcastVideoInfo()",
    "description": "This function is used to get information about an existing broadcast audio media entry. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "media ID of the station"
      },
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "name"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "genre"
      },
      {
        "type": "string",
        "name": "string",
        "description": "description"
      },
      {
        "type": "string",
        "name": "string",
        "description": "name"
      },
      {
        "type": "string",
        "name": "string",
        "description": "image. this is a base64 encoded JPEG file of the cover art."
      }
    ],
    "deprecated": false
  },
  {
    "label": "MediaModifyBroadcastVideoInfo",
    "signature": "C4:MediaModifyBroadcastVideoInfo()",
    "description": "Modifies a broadcast video channel. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "name"
      },
      {
        "type": "table",
        "name": "table",
        "description": "The table will have key of location, name, description and genre of the broadcast video channel       modifications."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaRemoveBroadcastVideo",
    "signature": "C4:MediaRemoveBroadcastVideo()",
    "description": "This function is used to remove a video station from the system. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "The Media ID of the station to remove."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaGetDeviceContext",
    "signature": "C4:MediaGetDeviceContext)",
    "description": "Function that returns the what the device context is currently set to. If â€œ0â€ then all media APIs are using the current driverâ€™s device id. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "Driver Device ID"
      }
    ],
    "deprecated": false
  },
  {
    "label": "MediaRemoveAllMedia",
    "signature": "C4:MediaRemoveAllMedia)",
    "description": "Removes all albums songs and movies from the device. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "New device id to be associated with media related apiâ€™s."
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "The new Media ID for the movie"
      }
    ],
    "deprecated": false
  },
  {
    "label": "MediaSetDeviceContext",
    "signature": "C4:MediaSetDeviceContext()",
    "description": "Function that sets a device id to be used for media related call. If set to any value other than â€œ0â€ then adding, modifying, retrieving or removing functionality will use the supplied device id. Note that this API must be called in the OnDriverLateInit area of the device driver.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "New device id to be associated with media related apiâ€™s."
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "The new Media ID for the movie"
      }
    ],
    "deprecated": false
  },
  {
    "label": "Receiver with Onscreen Binding",
    "signature": "C4:MediaAddMovieInfo ()",
    "description": "To enable a receiver to be capable of being the onscreen device, add the following to your &lt;connections&gt; section of your driver. This will then allow the room's onscreen input to be hooked up to the receiverâ€™s output. Note that for the sections to be valid, a video path must also exist (the room must also be able to select the receiver as the video endpoint).",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "title"
      },
      {
        "type": "table",
        "name": "table",
        "description": "Table information. The table may have entries for:"
      },
      {
        "type": "",
        "name": "",
        "description": "string location"
      },
      {
        "type": "",
        "name": "",
        "description": "string title"
      },
      {
        "type": "",
        "name": "",
        "description": "string directors â€“ comma separated"
      },
      {
        "type": "",
        "name": "",
        "description": "string description"
      },
      {
        "type": "",
        "name": "",
        "description": "string cast â€“ comma separated"
      },
      {
        "type": "",
        "name": "",
        "description": "string rating"
      },
      {
        "type": "",
        "name": "",
        "description": "string rating reason"
      },
      {
        "type": "",
        "name": "",
        "description": "string reviews"
      },
      {
        "type": "",
        "name": "",
        "description": "string genre"
      },
      {
        "type": "",
        "name": "",
        "description": "string aspect ratio"
      },
      {
        "type": "",
        "name": "",
        "description": "string release date"
      },
      {
        "type": "",
        "name": "",
        "description": "string release company"
      },
      {
        "type": "",
        "name": "",
        "description": "string length â€“ time span in minutes"
      },
      {
        "type": "",
        "name": "",
        "description": "string cover art â€“ this is a base64 encoded JPEG file of the cover art."
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "The new Media ID for the movie"
      }
    ],
    "deprecated": false
  },
  {
    "label": "Sending Room Keypress Commands from Receiver Driver",
    "signature": "C4:MediaAddMovieInfo ()",
    "description": "",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "title"
      },
      {
        "type": "table",
        "name": "table",
        "description": "Table information. The table may have entries for:"
      },
      {
        "type": "",
        "name": "",
        "description": "string location"
      },
      {
        "type": "",
        "name": "",
        "description": "string title"
      },
      {
        "type": "",
        "name": "",
        "description": "string directors â€“ comma separated"
      },
      {
        "type": "",
        "name": "",
        "description": "string description"
      },
      {
        "type": "",
        "name": "",
        "description": "string cast â€“ comma separated"
      },
      {
        "type": "",
        "name": "",
        "description": "string rating"
      },
      {
        "type": "",
        "name": "",
        "description": "string rating reason"
      },
      {
        "type": "",
        "name": "",
        "description": "string reviews"
      },
      {
        "type": "",
        "name": "",
        "description": "string genre"
      },
      {
        "type": "",
        "name": "",
        "description": "string aspect ratio"
      },
      {
        "type": "",
        "name": "",
        "description": "string release date"
      },
      {
        "type": "",
        "name": "",
        "description": "string release company"
      },
      {
        "type": "",
        "name": "",
        "description": "string length â€“ time span in minutes"
      },
      {
        "type": "",
        "name": "",
        "description": "string cover art â€“ this is a base64 encoded JPEG file of the cover art."
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "The new Media ID for the movie"
      }
    ],
    "deprecated": false
  },
  {
    "label": "Overview",
    "signature": "C4:MediaAddMovieInfo ()",
    "description": "The examples used in the Movies section of this document will reference the following movie:",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "title"
      },
      {
        "type": "table",
        "name": "table",
        "description": "Table information. The table may have entries for:"
      },
      {
        "type": "",
        "name": "",
        "description": "string location"
      },
      {
        "type": "",
        "name": "",
        "description": "string title"
      },
      {
        "type": "",
        "name": "",
        "description": "string directors â€“ comma separated"
      },
      {
        "type": "",
        "name": "",
        "description": "string description"
      },
      {
        "type": "",
        "name": "",
        "description": "string cast â€“ comma separated"
      },
      {
        "type": "",
        "name": "",
        "description": "string rating"
      },
      {
        "type": "",
        "name": "",
        "description": "string rating reason"
      },
      {
        "type": "",
        "name": "",
        "description": "string reviews"
      },
      {
        "type": "",
        "name": "",
        "description": "string genre"
      },
      {
        "type": "",
        "name": "",
        "description": "string aspect ratio"
      },
      {
        "type": "",
        "name": "",
        "description": "string release date"
      },
      {
        "type": "",
        "name": "",
        "description": "string release company"
      },
      {
        "type": "",
        "name": "",
        "description": "string length â€“ time span in minutes"
      },
      {
        "type": "",
        "name": "",
        "description": "string cover art â€“ this is a base64 encoded JPEG file of the cover art."
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "The new Media ID for the movie"
      }
    ],
    "deprecated": false
  },
  {
    "label": "MediaAddMovieInfo",
    "signature": "C4:MediaAddMovieInfo ()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "title"
      },
      {
        "type": "table",
        "name": "table",
        "description": "Table information. The table may have entries for:"
      },
      {
        "type": "",
        "name": "",
        "description": "string location"
      },
      {
        "type": "",
        "name": "",
        "description": "string title"
      },
      {
        "type": "",
        "name": "",
        "description": "string directors â€“ comma separated"
      },
      {
        "type": "",
        "name": "",
        "description": "string description"
      },
      {
        "type": "",
        "name": "",
        "description": "string cast â€“ comma separated"
      },
      {
        "type": "",
        "name": "",
        "description": "string rating"
      },
      {
        "type": "",
        "name": "",
        "description": "string rating reason"
      },
      {
        "type": "",
        "name": "",
        "description": "string reviews"
      },
      {
        "type": "",
        "name": "",
        "description": "string genre"
      },
      {
        "type": "",
        "name": "",
        "description": "string aspect ratio"
      },
      {
        "type": "",
        "name": "",
        "description": "string release date"
      },
      {
        "type": "",
        "name": "",
        "description": "string release company"
      },
      {
        "type": "",
        "name": "",
        "description": "string length â€“ time span in minutes"
      },
      {
        "type": "",
        "name": "",
        "description": "string cover art â€“ this is a base64 encoded JPEG file of the cover art."
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "The new Media ID for the movie"
      }
    ],
    "deprecated": false
  },
  {
    "label": "MediaGetAllMovies",
    "signature": "C4:MediaGetAllMovies()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "Table",
        "name": "Table",
        "description": "Table containing Media IDs and locations."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaGetMovieInfo",
    "signature": "C4:MediaGetMovieInfo()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "This is the Media ID of the movie."
      },
      {
        "type": "table",
        "name": "table",
        "description": "Table information. The table may have entries for:"
      },
      {
        "type": "",
        "name": "",
        "description": "string location"
      },
      {
        "type": "",
        "name": "",
        "description": "string title"
      },
      {
        "type": "",
        "name": "",
        "description": "string directors â€“ comma separated"
      },
      {
        "type": "",
        "name": "",
        "description": "string description"
      },
      {
        "type": "",
        "name": "",
        "description": "string cast â€“ comma separated"
      },
      {
        "type": "",
        "name": "",
        "description": "string rating"
      },
      {
        "type": "",
        "name": "",
        "description": "string rating reason"
      },
      {
        "type": "",
        "name": "",
        "description": "string reviews"
      },
      {
        "type": "",
        "name": "",
        "description": "string genre"
      },
      {
        "type": "",
        "name": "",
        "description": "string aspect ratio"
      },
      {
        "type": "",
        "name": "",
        "description": "string release date"
      },
      {
        "type": "",
        "name": "",
        "description": "string release company"
      },
      {
        "type": "",
        "name": "",
        "description": "string length â€“ time span in minutes"
      },
      {
        "type": "",
        "name": "",
        "description": "string cover art â€“ this is a base64 encoded JPEG file of the cover art."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaGetMovieLocation",
    "signature": "C4:MediaGetMovieLocations()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "The Media ID of the movie."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaRemoveMovie",
    "signature": "C4:MediaRemoveMovie()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "The Media ID of the movie."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaRemoveAllMovies",
    "signature": "C4:MediaRemoveAllMovies()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "media ID"
      },
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "name"
      },
      {
        "type": "table",
        "name": "table",
        "description": "Table information. The table may have entries for:"
      },
      {
        "type": "",
        "name": "",
        "description": "string location"
      },
      {
        "type": "",
        "name": "",
        "description": "string title"
      },
      {
        "type": "",
        "name": "",
        "description": "string directors â€“ comma separated"
      },
      {
        "type": "",
        "name": "",
        "description": "string description"
      },
      {
        "type": "",
        "name": "",
        "description": "string cast â€“ comma separated"
      },
      {
        "type": "",
        "name": "",
        "description": "string rating"
      },
      {
        "type": "",
        "name": "",
        "description": "string rating reason"
      },
      {
        "type": "",
        "name": "",
        "description": "string reviews"
      },
      {
        "type": "",
        "name": "",
        "description": "string genre"
      },
      {
        "type": "",
        "name": "",
        "description": "string aspect ratio"
      },
      {
        "type": "",
        "name": "",
        "description": "string release date"
      },
      {
        "type": "",
        "name": "",
        "description": "string release company"
      },
      {
        "type": "",
        "name": "",
        "description": "string length â€“ time span in minutes"
      },
      {
        "type": "",
        "name": "",
        "description": "string cover art â€“ this is a base64 encoded JPEG file of the cover art."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaModifyMovieInfo",
    "signature": "C4:MediaModifyMovieInfo()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "media ID"
      },
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "name"
      },
      {
        "type": "table",
        "name": "table",
        "description": "Table information. The table may have entries for:"
      },
      {
        "type": "",
        "name": "",
        "description": "string location"
      },
      {
        "type": "",
        "name": "",
        "description": "string title"
      },
      {
        "type": "",
        "name": "",
        "description": "string directors â€“ comma separated"
      },
      {
        "type": "",
        "name": "",
        "description": "string description"
      },
      {
        "type": "",
        "name": "",
        "description": "string cast â€“ comma separated"
      },
      {
        "type": "",
        "name": "",
        "description": "string rating"
      },
      {
        "type": "",
        "name": "",
        "description": "string rating reason"
      },
      {
        "type": "",
        "name": "",
        "description": "string reviews"
      },
      {
        "type": "",
        "name": "",
        "description": "string genre"
      },
      {
        "type": "",
        "name": "",
        "description": "string aspect ratio"
      },
      {
        "type": "",
        "name": "",
        "description": "string release date"
      },
      {
        "type": "",
        "name": "",
        "description": "string release company"
      },
      {
        "type": "",
        "name": "",
        "description": "string length â€“ time span in minutes"
      },
      {
        "type": "",
        "name": "",
        "description": "string cover art â€“ this is a base64 encoded JPEG file of the cover art."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaAddSongInfo",
    "signature": "C4:MediaAddSongInfo()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "Information for location and title."
      }
    ],
    "deprecated": false
  },
  {
    "label": "MediaGetSongLocation",
    "signature": "C4:MediaGetSongLocation()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "The Media ID of the song."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaRemoveSong",
    "signature": "C4:MediaRemoveSong()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "The Media ID of the song."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaLinkSongToAlbum",
    "signature": "C4:MediaLinkSongToAlbum()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "The Media ID of the album"
      },
      {
        "type": "number",
        "name": "number",
        "description": "The Media ID of the song"
      },
      {
        "type": "number",
        "name": "number",
        "description": "Track-based sequence that this song belongs within the album"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "MediaGetSongsforAlbum",
    "signature": "C4:MediaGetSongsforAlbum()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "The Media ID of the album containing songs"
      }
    ],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "Values including Media ID and location for each song."
      }
    ],
    "deprecated": false
  },
  {
    "label": "MediaModifySongInfo",
    "signature": "C4:MediaModifySongInfo()",
    "description": "This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "media ID"
      },
      {
        "type": "string",
        "name": "string",
        "description": "location"
      },
      {
        "type": "string",
        "name": "string",
        "description": "name"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "AddDynamicBinding",
    "signature": "C4:AddDynamicBinding(idBinding, strType, bIsProvider, strName, strClass, bHidden, bAutoBind)",
    "description": "Function called by a DriverWorks driver to add a dynamic binding (a binding added at runtime). This is typically done by security panels or other devices whose number of bindings are unknown when the driver is created.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "ID of the dynamic binding."
      },
      {
        "type": "string",
        "name": "strType",
        "description": "Type of dynamic binding. Valid types include: CONTROL, PROXY"
      },
      {
        "type": "bool",
        "name": "bIsProvider",
        "description": "Provider: Whether the binding is a Provider or a Consumer binding."
      },
      {
        "type": "string",
        "name": "strName",
        "description": "Name of binding that will appear in Composerâ€™s connections page."
      },
      {
        "type": "string",
        "name": "strClass",
        "description": "Class of dynamic binding that is being created."
      },
      {
        "type": "bool",
        "name": "bHidden",
        "description": "Hidden: Whether the dynamic binding is hidden. Should typically be false."
      },
      {
        "type": "bool",
        "name": "bAutoBind",
        "description": "AutoBind: Whether the dynamic binding should be auto-bound. Should typically be false"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "String encoded in Base64 encoding."
      }
    ],
    "deprecated": false
  },
  {
    "label": "AllowExecute",
    "signature": "C4:AllowExecute()",
    "description": "Beginning with OS release 2.6.0, default runtime editing of encrypted drivers has been deprecated. This has been done to better protect encrypted drivers from unwanted code review or hacking. The AllowExecute API allows for the runtime editing of encrypted drivers through its setting. The API defaults to a setting of False. When set to True, the lua command window will not support entry of any data and the lua output window cannot be used as a display. Use of this API allows driver developers to build into their driver the option to enable remote execution permanently or embed the function call within your own debugging functions to allow or disallow executing of commands in Composer. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "bool",
        "name": "bool",
        "description": "True / False"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "String encoded in Base64 encoding."
      }
    ],
    "deprecated": false
  },
  {
    "label": "Base64Encode",
    "signature": "C4:Base64Encode(strToEncode)",
    "description": "Function called in a DriverWorks driver to encode the specified string as a Base64-encoded string. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "strToEncode",
        "description": "String to be encoded in Base64 encoding"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "String encoded in Base64 encoding."
      }
    ],
    "deprecated": false
  },
  {
    "label": "Base64Decode",
    "signature": "C4:Base64Decode(strToDecode)",
    "description": "Function called in a DriverWorks driver to decode the specified string from a Base64-encoded string. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "strToDecode",
        "description": "String to be decoded from Base64         encoding"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Decoded from Base64 encoding."
      }
    ],
    "deprecated": false
  },
  {
    "label": "Exit Navigation",
    "signature": "C4:GetCapability(strName)",
    "description": "This command is sent to the room to change the room from the â€œIn Navigationâ€ mode back to the â€œNormalâ€ mode. While in the â€œNormalâ€ mode, the commands sent to the room are sent to the selected audio or video device. When in the â€œIn Navigationâ€ mode a set of the navigational commands are sent to the on screen device.For reference, the set of commands that are forwarded are:",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "strName",
        "description": "The name of the capability to retrieve"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "The value of the capability retrieved from the driver file"
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetCapability",
    "signature": "C4:GetCapability(strName)",
    "description": "Function called from DriverWorks driver to get a capability from the driver. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "strName",
        "description": "The name of the capability to retrieve"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "The value of the capability retrieved from the driver file"
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetDeviceData",
    "signature": "C4:GetDeviceData()",
    "description": "This API returns data found in the driver's device data, &lt;devicedata&gt; XML. The Device ID of the driver value must be passed to return the XML content. An optional string value parameter can be passed to retrieve specific XML data.",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "Device ID of the driver."
      },
      {
        "type": "string",
        "name": "string",
        "description": "tagName is an optional parameter that can be passed to return specific devicedata."
      }
    ],
    "returns": [
      {
        "type": "single",
        "name": "return",
        "description": "&lt;devicedata&gt;&lt;/devicedata&gt;"
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetDevicesByName",
    "signature": "C4:GetDeviceByName(str, str)",
    "description": "Function used to obtain the Device ID and the Room ID assigned to a device in the project. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.8.0",
    "parameters": [
      {
        "type": "string",
        "name": "str",
        "description": "Name of the Device in the project."
      },
      {
        "type": "string",
        "name": "str",
        "description": "Optional. Name of the Room where the Device resides."
      }
    ],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "Device ID and Room ID values."
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetDeviceID",
    "signature": "C4:GetDeviceID()",
    "description": "Function called from DriverWorks driver to get this driverâ€™s Device ID. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.8.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "This is the Proxy ID or the Protocol ID assigned to the Device in the project."
      }
    ],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "Table of all of the proxy variables or protocol variables for the Device (depending on the parameter       passed) as well as all of the information for each of the variables."
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetDeviceVariables",
    "signature": "C4:GetDeviceVariables()",
    "description": "Function used to obtain a Device's variables. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.8.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "This is the Proxy ID or the Protocol ID assigned to the Device in the project."
      }
    ],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "Table of all of the proxy variables or protocol variables for the Device (depending on the parameter       passed) as well as all of the information for each of the variables."
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetDriverConfigInfo",
    "signature": "C4:GetDriverConfigInfo()",
    "description": "Function that returns the XML contents of a driver's config.xml file. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.8.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "XML tag for the inner XML that is being requested. This is passed in a string format without the XML       brackets."
      }
    ],
    "returns": [
      {
        "type": "xml",
        "name": "xml",
        "description": "XML of the tag that is passed as a parameter."
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetLocale",
    "signature": "C4:GetLocale()",
    "description": "Function to get the current locale of the system. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "location (optional) â€“ The location parameter can be passed to identify a specific place in the project       where project hierarchy data will be returned. All children of the location specified (including itself)       will be included in the results."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetPrivateKeyPassword",
    "signature": "C4:GetProjectItems()",
    "description": "This callback API supports password protection for SSL Certificates that are embedded within a device driver. ImplementingGetPrivateKeyPasswordwithin a driver permits a password to be returned for a binding which requires an SSL Certificate. When implemented correctly, this API will return the string value of the SSL Certificate password. Use of this API is recommended in conjunction with encrypted drivers. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "Binding ID of the network connection with the password-protected certificate."
      },
      {
        "type": "number",
        "name": "number",
        "description": "Port number for the networkconnection with the password-protected certificate."
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "String value of the SSL Certificate password"
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetProjectItems",
    "signature": "C4:GetProjectItems()",
    "description": "If no parameter is passed, this API returns the entire project as an .XML string. This string can then be parsed to retrieve variable IDs. The API supports several parameters (filters) that will return specific XML. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "Filter. Optional, Filters can be applied to GetProjectItems(). Each filter is a separate string       parameter to the function. The list of filters include: ALL, LOCATIONS, PROXIES, DEVICES, AGENTS,       LIMIT_DEVICE_DATA, JUST_CAPABILITIES and NO_ROOT_TAGS"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Project data in XML format."
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetSystemType",
    "signature": "C4:GetSystemType()",
    "description": "Function that returns the controller type used as the primary controller in a project. Returns OS Info of Windows when called from a Virtual Director environment.",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "String to be translated"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetText",
    "signature": "C4:GetText()",
    "description": "Function to get a string translated into the current locale from a â€œCâ€ (English) input string. This will only return translated strings if there is a corresponding input -&gt; translation match in the current translated string for the set locale. If no translation is found the input string is returned. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "String to be translated"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Translated string"
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetUniqueMAC",
    "signature": "C4:GetUniqueMAC()",
    "description": "Function to get the unique MAC address of the Director box. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "ntoh 1",
    "signature": "C4:ntoh_1()",
    "description": "Function called from DriverWorks driver to get a capability from the driverâ€™s .c4z file. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "The name of the capability to retrieve"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "The value of the capability retrieved from the driver file"
      }
    ],
    "deprecated": false
  },
  {
    "label": "htoh 2",
    "signature": "C4:htoh_1()",
    "description": "Converts the numeric value passed in to network byte order. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "int",
        "name": "int",
        "description": "Number to be converted"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "8 byte string representing the converted network byte order"
      }
    ],
    "deprecated": false
  },
  {
    "label": "ParseIso8601DateTime",
    "signature": "C4:ParseIso8601DateTime(str, strict)",
    "description": "Parses a ISO 8601 date/time stamp to UTC (Coordinated Universal Time). This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.7.0",
    "parameters": [
      {
        "type": "string",
        "name": "str",
        "description": "The string to be parsed."
      },
      {
        "type": "bool",
        "name": "strict",
        "description": "Optional. Strict parsing type,. Defaults to false. If enabled, leading or trailing whitespace will cause       the function to fail."
      }
    ],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "similar to what a os.date(\"t\") call would return, except that the isdst field will be missing due to it       being UTC."
      },
      {
        "type": "number",
        "name": "number",
        "description": "The Number of the second epoch in UTC."
      },
      {
        "type": "number",
        "name": "number",
        "description": "The fraction of a second, expressed in microseconds."
      }
    ],
    "deprecated": false
  },
  {
    "label": "PersistDeleteAll",
    "signature": "C4:PersistDeleteAll()",
    "description": "Deletes all values. See PersistGetValue and PersistSetValue",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "A string containing the name of the value."
      },
      {
        "type": "bool",
        "name": "bool",
        "description": "Boolean indicating whether the value is encrypted. If true, the value is decrypted before it is returned"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "PersistGetValue",
    "signature": "C4:PersistGetValue(name, encrypted)",
    "description": "Returns the value associated with the specified name. This API can be used before OnDriverLateInit.",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "string",
        "name": "name",
        "description": "A string containing the name of the value."
      },
      {
        "type": "bool",
        "name": "encrypted",
        "description": "Boolean indicating whether the value is encrypted. If true, the value is decrypted before it is returned"
      }
    ],
    "returns": [
      {
        "type": "value",
        "name": "value",
        "description": "The value associated with the specified name, or nil if no value was found. Can be : number, string, boolean, table."
      }
    ],
    "deprecated": false
  },
  {
    "label": "PersistSetValue",
    "signature": "C4:PersistSetValue(name, value, encrypted)",
    "description": "Persists a value associated with the specified name. This API can be used before OnDriverLateInit.",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "string",
        "name": "name",
        "description": "A string containing the name of the value."
      },
      {
        "type": "value",
        "name": "value",
        "description": "The value to be persisted. The type can be any one of the following: number, string, boolean, table."
      },
      {
        "type": "bool",
        "name": "encrypted",
        "description": "Boolean indicating whether the value is encrypted before persisting."
      }
    ],
    "returns": [
      {
        "type": "value",
        "name": "value",
        "description": "The value associated with the specified name, or nil if no value was found."
      }
    ],
    "deprecated": false
  },
  {
    "label": "RemoveDynamicBinding",
    "signature": "C4:RemoveDynamicBinding(idBinding)",
    "description": "Function called by a DriverWorks driver to remove a dynamically created binding. This API should not be invoked during OnDriverInit. No Events will be sent prior to OnDriverlateInit. If an event is required, this method must be invoked in OnDriverlateInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "ID of the dynamic binding to remove."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "RenameDevice",
    "signature": "C4:RenameDevice(proxyId, name)",
    "description": "The RenameDevice API supports the ability to rename a device that is currently in a Control4 project from a driver. This API can be also called from a driver other than that of the device's. This supports that ability to rename project devices externally. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "proxyId",
        "description": "The Proxy ID value of the device being renamed"
      },
      {
        "type": "number",
        "name": "name",
        "description": "Device ID of the device being renamed."
      },
      {
        "type": "string",
        "name": "string",
        "description": "New device name."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "RoomGetID",
    "signature": "C4:RoomGetID()",
    "description": "Function to get the ID value of the room containing the driver. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [],
    "returns": [
      {
        "type": "int",
        "name": "int",
        "description": "Device ID of containing room."
      }
    ],
    "deprecated": false
  },
  {
    "label": "RoomSelectNav",
    "signature": "C4:RoomSelectNav (int)",
    "description": "Function to force the selection of onscreen for the selected room. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "int",
        "name": "int",
        "description": "Device ID of the room to force onscreen selection"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SendDataToUI",
    "signature": "C4:SendDataToUI (xml)",
    "description": "Function to send data to subscribed navigators. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "xml",
        "description": "xml string to send"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SendUIRequest",
    "signature": "C4:SendUIRequest (int,string, tParams)",
    "description": "Function that sends a request to another driver. It uses the proxy or protocol ID value of the driver as a means to target the driver where the request will be sent. The driver receiving the SendUIRequest must have an a UIRequest function configured which will contain the return values requested by the SendUIRequest call.",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [
      {
        "type": "int",
        "name": "int",
        "description": "Proxy or protocol ID value of the driver receiving the SendUIRequest"
      },
      {
        "type": "string",
        "name": "string",
        "description": "Request to send in string format"
      },
      {
        "type": "table",
        "name": "tParams",
        "description": "Table containing values sent with the request. If no values are needed an empty table must be sent."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SetPropertyAttribs",
    "signature": "C4:SetPropertyAttribs(string, int)",
    "description": "Function to modify the visibility of properties as viewed from Composer. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "Name of property to modify"
      },
      {
        "type": "int",
        "name": "int",
        "description": "0 (to show) or 1 (to hide)"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "TEADecrypt",
    "signature": "C4:TEADecrypt(strBuf, strKey)",
    "description": "Decrypt the input string with Corrected Block TEA (XXTEA) Algorithm, using the specified key. This API can be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "strBuf",
        "description": "String to be decrypted"
      },
      {
        "type": "key",
        "name": "strKey",
        "description": "Key to use for decryption. Keys are 32 hex digits, encoded as a string (128-bit)."
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Decrypted version of input string."
      }
    ],
    "deprecated": false
  },
  {
    "label": "TEAEncrypt",
    "signature": "C4:TEAEncrypt(strBuf, strKey)",
    "description": "Encrypt the input string with Corrected Block TEA (XXTEA) Algorithm, using the specified key. This API can be invoked during OnDriverInit",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "strBuf",
        "description": "String to be encrypted"
      },
      {
        "type": "key",
        "name": "strKey",
        "description": "Key to use for encryption. Keys are 32 hex digits, encoded as a string (128-bit)."
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "TEA Encrypted version of input string"
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetProjectProperty",
    "signature": "C4:GetProjectProperty(propertyName)",
    "description": "GetProjectProperty takes a single string parameter from a list of property names. The API returns the value of that property, if it exists.",
    "documentation": null,
    "version": "",
    "parameters": [
      {
        "type": "string",
        "name": "propertyName",
        "description": "Name of Property. Includes the following:"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SetPropertyAttribs",
    "signature": "C4:SetPropertyAttribs(strName, int)",
    "description": "Function called from DriverWorks driver to display or hide Properties in Composer's Lua Properties page. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "",
    "parameters": [
      {
        "type": "string",
        "name": "strName",
        "description": "Name of Property"
      },
      {
        "type": null,
        "name": "int",
        "description": null
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "UpdateProperty",
    "signature": "C4:UpdateProperty(strName, strValue)",
    "description": "Function called from DriverWorks driver to update driver properties. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "",
    "parameters": [
      {
        "type": "string",
        "name": "strName",
        "description": "Name of Property to update."
      },
      {
        "type": "string",
        "name": "strValue",
        "description": "New value of Property."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "UpdatePropertyList",
    "signature": "C4:UpdatePropertyList (strName, strValueList, strValueDefault)",
    "description": "Function called from DriverWorks driver to update driver properties. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "",
    "parameters": [
      {
        "type": "string",
        "name": "strName",
        "description": "Name of Property to update."
      },
      {
        "type": "string",
        "name": "strValueList",
        "description": "New list for the property. This list needs to be a comma delimited list."
      },
      {
        "type": "string",
        "name": "strValueDefault",
        "description": "Optional but Recommended New Value of the property. This value needs to be included in the list."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetProxyDevicesByName",
    "signature": "C4:GetProxyDevicesByName()",
    "description": "Function that returns the all proxy devices by proxy name. For example, if passed light.c4i it will return a list of all lights in the project. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "Driver name"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Proxy name"
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetDevicesByC4iName",
    "signature": "C4:GetDevicesByC4iName()",
    "description": "Function that returns specific devices by .c4i (driver) name. For example, if passed light_ip_control4_ldz-102-w-c4iit will return a list of all Control4 Wireless dimmers in the project. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "Driver name"
      }
    ],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "Table of device IDs."
      }
    ],
    "deprecated": false
  },
  {
    "label": "SendToProxy",
    "signature": "C4:SendToProxy(idBinding, strCommand, tParams, strmessage)",
    "description": "Function called from DriverWorks driver to send a Control4 BindMessage to the proxy bound to the specified binding. This API should not be invoked during OnDriverInit. ",
    "documentation": null,
    "version": "",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "Binding ID for the proxy you wish to send to"
      },
      {
        "type": "string",
        "name": "strCommand",
        "description": "Command to send to the proxy"
      },
      {
        "type": "table",
        "name": "tParams",
        "description": "Lua table containing parameters to the command."
      },
      {
        "type": "string",
        "name": "strmessage",
        "description": "COMMAND or NOTIFY - Overrides the default message for SendToProxy. See Note below."
      },
      {
        "type": "bool",
        "name": "bool",
        "description": "Optional. When set to TRUE will allow for an empty string to be sent as a parameter value."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "RegistryDeleteValue",
    "signature": "C4:RegistryDeleteValue(key)",
    "description": "Removes a key/value pair from the Registry.",
    "documentation": null,
    "version": "2.10.4",
    "parameters": [
      {
        "type": "key",
        "name": "key",
        "description": "number: The key to be removed from the Registry"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "RegistrySetValue",
    "signature": "C4:RegistrySetValue(key, value)",
    "description": "Sets the value of a Registry key/value pair. The value is updated if the specified key/value pair exists. A key/value pair is created by the API if it does not exist. ",
    "documentation": null,
    "version": "2.10.4",
    "parameters": [
      {
        "type": "key",
        "name": "key",
        "description": "number: The name of the key to which the specified value is associated."
      },
      {
        "type": "value",
        "name": "value",
        "description": "The name of the key to which the specified value is associated."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "AddSingleDayEntry",
    "signature": "C4Scheduler:AddSingleDayEntry(name, start_time, options)",
    "description": "This API adds an event which occurs once.",
    "documentation": null,
    "version": "3.0.0",
    "parameters": [
      {
        "type": "string",
        "name": "name",
        "description": "String value of the name of the event being added."
      },
      {
        "type": "table",
        "name": "start_time",
        "description": "Optional table that includes: year, month, day, hour using the 24 hour clock, minute. Default time is 12:00 AM"
      },
      {
        "type": "table",
        "name": "options",
        "description": "Table of additional, optional parameters that includes:"
      },
      {
        "type": "",
        "name": "",
        "description": "hidden - Boolean defaults to false. True prevents the Event from displaying in the Scheduler Agent in ComposerPro"
      },
      {
        "type": "",
        "name": "",
        "description": "user_hidden - Boolean defaults to false. Setting to true prevents the Event from displaying on Navigators."
      },
      {
        "type": "",
        "name": "",
        "description": "category - String value available to the driver writer to use however they see fit. Can be used to categorize events."
      },
      {
        "type": "",
        "name": "",
        "description": "enabled - Boolean defaults to true. Setting enabled to false will disable the Event."
      },
      {
        "type": "",
        "name": "",
        "description": "locked - Boolean which defaults to false. Setting enabled to true will place the Event in a read only state."
      }
    ],
    "returns": [
      {
        "type": "value",
        "name": "value",
        "description": "The added Event ID value."
      }
    ],
    "deprecated": false
  },
  {
    "label": "AddDailySunsetRandomOffsetEntry",
    "signature": "C4Scheduler:AddDailySunsetRandomOffsetEntry(name, random_range_minutes, start_time, end_date, options)",
    "description": "This API adds an event which occurs daily at sunset and can be randomized by a range of 60 minutes. Sunset time is based data provided by Director.",
    "documentation": null,
    "version": "3.0.0",
    "parameters": [
      {
        "type": "string",
        "name": "name",
        "description": "String value of the name of the event being added."
      },
      {
        "type": "table",
        "name": "random_range_minutes",
        "description": "Random range of minutes. number = number of minutes, range = (1-60)"
      },
      {
        "type": "table",
        "name": "start_time",
        "description": "start time includes year, month, day, hour using 24 hour clock. minute is optional The default time is 12:00 AM."
      },
      {
        "type": "table",
        "name": "end_date",
        "description": "end date. optional. includes: year, month, day"
      },
      {
        "type": "table",
        "name": "options",
        "description": "Table of additional, optional parameters that includes:"
      },
      {
        "type": "",
        "name": "",
        "description": "hidden - Boolean. Defaults to false. Setting to true prevents the Event from displaying in the Scheduler Agent in ComposerPro"
      },
      {
        "type": "",
        "name": "",
        "description": "user_hidden - Boolean. Defaults to false. Setting user hidden to true prevents the Event from displaying on Navigators."
      },
      {
        "type": "",
        "name": "",
        "description": "category - String value that is available to the driver writer to use however they see fit. Can be used to categorize events."
      },
      {
        "type": "",
        "name": "",
        "description": "enabled - Boolean which defaults to true. Setting enabled to false will disable the Event."
      },
      {
        "type": "",
        "name": "",
        "description": "locked - Boolean which defaults to false. Setting enabled to true will place the Event in a read only state."
      }
    ],
    "returns": [
      {
        "type": "value",
        "name": "value",
        "description": "The added Event ID value."
      }
    ],
    "deprecated": false
  },
  {
    "label": "AddDaysOfTheWeekEntry",
    "signature": "C4Scheduler:AddDaysOfTheWeekEntry(name, days_of_the_week, start_time, end_date, options)",
    "description": "This API adds an event which occurs on defined days of the week.",
    "documentation": null,
    "version": "3.0.0",
    "parameters": [
      {
        "type": "string",
        "name": "name",
        "description": "String value of the name of the event being added."
      },
      {
        "type": "string",
        "name": "days_of_the_week",
        "description": "Weekday values of: SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY"
      },
      {
        "type": "table",
        "name": "start_time",
        "description": "start time includes year, month, day, hour using 24 hour clock. minute is optional The default time is       12:00 AM."
      },
      {
        "type": "table",
        "name": "end_date",
        "description": "end date. optional. includes: year, month, day"
      },
      {
        "type": "table",
        "name": "options",
        "description": "Table of additional, optional parameters that includes:"
      },
      {
        "type": "",
        "name": "",
        "description": "hidden - Boolean. Defaults to false. Setting to true prevents the Event from displaying in the Scheduler       Agent in ComposerPro"
      },
      {
        "type": "",
        "name": "",
        "description": "user_hidden - Boolean. Defaults to false. Setting user hidden to true prevents the Event       from displaying on Navigators."
      },
      {
        "type": "",
        "name": "",
        "description": "category - String value that is available to the driver writer to use however they see fit. Can be used       to categorize events."
      },
      {
        "type": "",
        "name": "",
        "description": "enabled - Boolean which defaults to true. Setting enabled to false will disable the Event."
      },
      {
        "type": "",
        "name": "",
        "description": "locked - Boolean which defaults to false. Setting enabled to true will place the Event in a read only       state."
      }
    ],
    "returns": [
      {
        "type": "value",
        "name": "value",
        "description": "The added Event ID value."
      }
    ],
    "deprecated": false
  },
  {
    "label": "AddEveryXMonthsEntry",
    "signature": "C4Scheduler:AddEveryXMonthsEntry(name, num_months, start_time, end_date, options",
    "description": "This API adds an event which occurs set number of months. For example, an event that occurs every 4 months.",
    "documentation": null,
    "version": "3.0.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "String value of the name of the event being added."
      },
      {
        "type": "table",
        "name": "table",
        "description": "number of months. range (1-100)"
      },
      {
        "type": "table",
        "name": "table",
        "description": "start time includes year, month, day, hour using 24 hour clock. Minute is optional The default time is       12:00 AM."
      },
      {
        "type": "table",
        "name": "table",
        "description": "end date. optional. includes: year, month, day"
      },
      {
        "type": "table",
        "name": "table",
        "description": "Table of additional, optional parameters that includes:"
      },
      {
        "type": "",
        "name": "",
        "description": "hidden - Boolean. Defaults to false. Setting to true prevents the Event from displaying in the Scheduler       Agent in ComposerPro"
      },
      {
        "type": "",
        "name": "",
        "description": "user_hidden - Boolean. Defaults to false. Setting user hidden to true prevents the Event       from displaying on Navigators."
      },
      {
        "type": "",
        "name": "",
        "description": "category - String value that is available to the driver writer to use however they see fit. Can be used       to categorize events."
      },
      {
        "type": "",
        "name": "",
        "description": "enabled - Boolean which defaults to true. Setting enabled to false will disable the Event."
      },
      {
        "type": "",
        "name": "",
        "description": "locked - Boolean which defaults to false. Setting enabled to true will place the Event in a read only       state."
      }
    ],
    "returns": [
      {
        "type": "value",
        "name": "value",
        "description": "The added Event ID value."
      }
    ],
    "deprecated": false
  },
  {
    "label": "AddSetDaysEveryXWeeksEntry",
    "signature": "C4Scheduler:AddSetDaysEveryXWeeksEntry(name, days_of_the_week, num_weeks, start_time, end_date, options)",
    "description": "This API adds an event which occurs on the same day(s) of the week over a defined period of weeks. For example, an event that occurs every Tuesday and Wednesday - every three weeks",
    "documentation": null,
    "version": "3.0.0",
    "parameters": [
      {
        "type": "string",
        "name": "name",
        "description": "String value of the name of the event being added."
      },
      {
        "type": "string",
        "name": "days_of_the_week",
        "description": "Weekday values of: SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY"
      },
      {
        "type": "number",
        "name": "num_weeks",
        "description": "Value between 1 and 100. Number of week between the event occurring"
      },
      {
        "type": "table",
        "name": "start_time",
        "description": "start time includes year, month, day, hour using 24 hour clock. Minute is optional The default time is       12:00 AM."
      },
      {
        "type": "table",
        "name": "end_date",
        "description": "end date. optional. includes: year, month, day"
      },
      {
        "type": "table",
        "name": "options",
        "description": "Table of additional, optional parameters that includes:"
      },
      {
        "type": "",
        "name": "",
        "description": "hidden - Boolean. Defaults to false. Setting to true prevents the Event from displaying in the Scheduler       Agent in ComposerPro"
      },
      {
        "type": "",
        "name": "",
        "description": "user_hidden - Boolean. Defaults to false. Setting user hidden to true prevents the Event       from displaying on Navigators."
      },
      {
        "type": "",
        "name": "",
        "description": "category - String value that is available to the driver writer to use however they see fit. Can be used       to categorize events."
      },
      {
        "type": "",
        "name": "",
        "description": "enabled - Boolean which defaults to true. Setting enabled to false will disable the Event."
      },
      {
        "type": "",
        "name": "",
        "description": "locked - Boolean which defaults to false. Setting enabled to true will place the Event in a read only       state."
      }
    ],
    "returns": [
      {
        "type": "value",
        "name": "value",
        "description": "The added Event ID value."
      }
    ],
    "deprecated": false
  },
  {
    "label": "AddSetDaysEveryXYearsEntry",
    "signature": "C4Scheduler:AddEveryXYearsEntry(name, num_years, start_time, end_date, options)",
    "description": "This API adds an event which occurs set number of years. For example, an event that occurs every 4 years.",
    "documentation": null,
    "version": "3.0.0",
    "parameters": [
      {
        "type": "string",
        "name": "name",
        "description": "String value of the name of the event being added."
      },
      {
        "type": "table",
        "name": "num_years",
        "description": "number of years. range: (1-100)"
      },
      {
        "type": "table",
        "name": "start_time",
        "description": "start time includes year, month, day, hour using 24 hour clock. Minute is optional The default time is       12:00 AM."
      },
      {
        "type": "table",
        "name": "end_date",
        "description": "end date. optional. includes: year, month, day"
      },
      {
        "type": "table",
        "name": "options",
        "description": "Table of additional, optional parameters that includes:"
      },
      {
        "type": "table",
        "name": "table",
        "description": "Table of additional, optional parameters that includes:"
      },
      {
        "type": "",
        "name": "",
        "description": "hidden - Boolean. Defaults to false. Setting to true prevents the Event from displaying in the Scheduler       Agent in ComposerPro"
      },
      {
        "type": "",
        "name": "",
        "description": "user_hidden - Boolean. Defaults to false. Setting user hidden to true prevents the Event       from displaying on Navigators."
      },
      {
        "type": "",
        "name": "",
        "description": "category - String value that is available to the driver writer to use however they see fit. Can be used       to categorize events."
      },
      {
        "type": "",
        "name": "",
        "description": "enabled - Boolean which defaults to true. Setting enabled to false will disable the Event."
      },
      {
        "type": "",
        "name": "",
        "description": "locked - Boolean which defaults to false. Setting enabled to true will place the Event in a read only       state."
      }
    ],
    "returns": [
      {
        "type": "value",
        "name": "value",
        "description": "The added Event ID value."
      }
    ],
    "deprecated": false
  },
  {
    "label": "DeleteEntryByID",
    "signature": "C4Scheduler:DeleteEntryByID(event_id)",
    "description": "Deletes and Event based on the Event ID value passed. A driver can only delete events which were created by that driver.",
    "documentation": null,
    "version": "3.0.0",
    "parameters": [
      {
        "type": "number",
        "name": "event_id",
        "description": "ID value of the name of the event being deleted."
      }
    ],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "Enabled - true/false"
      },
      {
        "type": "Description",
        "name": "Description",
        "description": "&lt;string&gt;"
      },
      {
        "type": "Eventid",
        "name": "Eventid",
        "description": "&lt;event id&gt;"
      },
      {
        "type": "creator_state",
        "name": "creator_state",
        "description": "&lt;string&gt;"
      },
      {
        "type": "hidden",
        "name": "hidden",
        "description": "true/false"
      },
      {
        "type": "creatorid",
        "name": "creatorid",
        "description": "&lt;creator id&gt;"
      },
      {
        "type": "category",
        "name": "category",
        "description": "&lt;string&gt;"
      },
      {
        "type": "locked",
        "name": "locked",
        "description": "true/false"
      },
      {
        "type": "xml",
        "name": "xml",
        "description": "&lt;xml string&gt; (see example below)"
      },
      {
        "type": "user_hidden",
        "name": "user_hidden",
        "description": "true/false"
      }
    ],
    "deprecated": false
  },
  {
    "label": "CreateNetworkConnection",
    "signature": "C4:CreateNetworkConnection (idBinding, strAddress, strConnectionType)",
    "description": "Function that defines a dynamic Network Connection so no Connection XML is required. Further (port-specific configuration) can be accomplished through the use of the NetPortOptions API. Connections are actually made using the NetConnect API. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "id of the Network Binding to create."
      },
      {
        "type": "string",
        "name": "strAddress",
        "description": "Network address or hostname that this network connection will use."
      },
      {
        "type": "string",
        "name": "strConnectionType",
        "description": "Optional string designating connection type"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetBindingAddress",
    "signature": "C4:GetBindingAddress (idBinding)",
    "description": "Returns a physical (IP) address of a network binding. This API should not be invoked during OnDriverInit",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "Binding value."
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Network address or hostname that this network connection will use."
      },
      {
        "type": "int",
        "name": "int",
        "description": "IP address of a network binding"
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetBoundConsumerDevices",
    "signature": "C4:GetBoundConsumerDevices ()",
    "description": "Call to retrieve the devices bound to (the consumers of) a binding provided (an output binding) by this device. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "The id of the device to check the bindings on."
      },
      {
        "type": "number",
        "name": "number",
        "description": "Binding ID."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetBoundProviderDevice",
    "signature": "C4:GetBoundProviderDevices()",
    "description": "Call to retrieve what device is attached to an input binding of the specified device. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "The id of the device to check the bindings on."
      },
      {
        "type": "number",
        "name": "number",
        "description": "Binding ID."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetControllerNetworkAddress",
    "signature": "C4:GetBoundConsumerDevices()",
    "description": "Function that returns the address of the master controller in a project. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Network address of the master controller in IP format"
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetDeviceDisplayName",
    "signature": "C4:GetDeviceDisplayName ()",
    "description": "Returns the name of the device as shown in Composer. This API should not be invoked during OnDriverInit",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "ID Value of a device. Optional"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Name of device."
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetDeviceMAC",
    "signature": "C4:GetDeviceMAC ()",
    "description": "Returns the MAC Address associated with a device that has already been identified in the Control4 Project. The API uses address resolution protocol (ARP) queries to lookup MAC hardware addresses. It will return a value of nil if the MAC address is not found in the controller's ARP tables. Considerations when using GetDeviceMAC include:",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "Network Binding ID value for the identified device"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetDiscoveryInfo",
    "signature": "C4:GetDiscoveryInfo(idBinding)",
    "description": "Returns a table that contains the device's discovery information.",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "Network Binding ID value for the identified device"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetMyNetworkAddress",
    "signature": "C4:GetMyNetworkAddress",
    "description": "API that returns the bound address of the \"device.\" For example, in the case of a single network binding, GetMyNetworkAddress returns the address of the device that's connected to the driver. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "The id of the device returning network binding information."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetNetworkBindingsByDevice",
    "signature": "C4:GetNetworkBindingsByDevice()",
    "description": "Function that returns network binding information for a device. ",
    "documentation": null,
    "version": "3.0.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "The id of the device returning network binding information."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetNetworkConnections",
    "signature": "C4:GetNetworkBindingsByDevice()",
    "description": "Function that returns a table containing all of the device connections as well as data for each individual connection.",
    "documentation": null,
    "version": "3.0.0",
    "parameters": [
      {
        "type": "table",
        "name": "table",
        "description": "Table containing connection information for the device and Information for each connection."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetProxyDevicesbyID",
    "signature": "C4:GetProxyDevicesbyID (idDevice)",
    "description": "Returns the Proxy ID value when passed a Device ID value. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idDevice",
        "description": "ID value of a device. Optional"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "Proxy ID value"
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetSerialSettings",
    "signature": "C4:GetSerialSettings (idBinding)",
    "description": "Returns the &lt;serialsettings&gt; string from the driver that is connected to the provided control binding. The control binding should be an RS232 provider binding. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "Control Binding Value"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "Serial Settings Data in string format."
      }
    ],
    "deprecated": false
  },
  {
    "label": "ReceivedFromSerial",
    "signature": "C4:ReceivedFromSerial(idBinding, strData)",
    "description": "Function which dumps the data received from serial (hex format) for inspection via print. It then evaluates the response for specific delimiters and extracts the necessary components which are then used to do something. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "ID of the serial interface the data was received on"
      },
      {
        "type": "string",
        "name": "strData",
        "description": "Data received from the serial interface"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "ReceivedFromNetwork",
    "signature": "C4:ReceivedFromNetwork(idBinding, nPort, strData)",
    "description": "Function which combines the data received from the network into a variable for processing when the connection status changes. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "Binding ID of the interface the data was received from"
      },
      {
        "type": "number",
        "name": "nPort",
        "description": "Network Port the data was received on"
      },
      {
        "type": "string",
        "name": "strData",
        "description": "Network data from the specified binding and port"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SetBindingAddress",
    "signature": "C4:SetBindingAddress(idBinding, strIPaddress)",
    "description": "Function that allows a TCP/IP device, with an existing connection, to use a different IP Address for connection purposes. This API can be used with both statically created connections (XML) as well as dynamically created ones. It is recommended that the NetConnect API is called after SetBindingAddress. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.8.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "Binding ID of the existing network binding"
      },
      {
        "type": "string",
        "name": "strIPaddress",
        "description": "New IP address for the connection"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SetBindingStatus",
    "signature": "C4:SetBindingStatus(idBinding, strStatus)",
    "description": "Function that enables a Lua driver to explicitly set the \"connected\" state for a connection binding. This can particularly useful for connection bindings that aren't persistent (i.e., always connected), such as HTTP. Such non-persistent connections are marked as Offline (yellow) in the Network Tools windows in Composer. The C4:SetBindingStatus function enables a driver to manage the \"connected\" state of a connection binding, effectively overriding the default behavior provided by Director",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "Binding ID of the existing network binding"
      },
      {
        "type": "string",
        "name": "strStatus",
        "description": "String that specifies the status to set"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SendBroadcast",
    "signature": "C4:SendBroadcast(payload, port)",
    "description": "Function that enables a Lua driver to send network broadcast messages. The function opens a UDP connection, sets the SO_BROADCAST socket option and then sends a specified payload to the directed broadcast address. For example, 192.168.1.255. If the directed broadcast address is unavailable for any reason then the limited broadcast address is used instead, for example: 255.255.255.255.",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "string",
        "name": "payload",
        "description": "Payload of the message to be broadcast"
      },
      {
        "type": "number",
        "name": "port",
        "description": "Port identifying the port to which the payload is broadcast."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SendToDevice",
    "signature": "C4:SendToDevice(idDevice, strCommand, tParams, AllowEmptyValues logCommand)",
    "description": "Function called from DriverWorks driver to send a Control4 CommandMessage to the specified Control4 device driver. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idDevice",
        "description": "Device ID of the driver you wish to send the command to."
      },
      {
        "type": "string",
        "name": "strCommand",
        "description": "Command to be sent"
      },
      {
        "type": "table",
        "name": "tParams",
        "description": "Lua table of parameters for the command."
      },
      {
        "type": "bool",
        "name": "AllowEmptyValues logCommand",
        "description": "allowEmptyValues (T/F) Optional. Defaults to False. TRUE will allow for an empty string to be sent as a       parameter value."
      },
      {
        "type": "bool",
        "name": "bool",
        "description": "logCommand Defaults to True. False prevents this APIâ€™s content from being logged."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SendToNetwork",
    "signature": "C4:SendToNetwork(idBinding, nPort, strData)",
    "description": "Function which sends an HTTP request to a network binding / port. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "Binding ID of the network interface to send on"
      },
      {
        "type": "number",
        "name": "nPort",
        "description": "Network port to send on"
      },
      {
        "type": "string",
        "name": "strData",
        "description": "Data to send out the specified network interface"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SendToSerial",
    "signature": "C4:SendToSerial(idBinding, strData)",
    "description": "Simple function which sends the command out serial port on binding 1 and adds the \\r terminator to the end of the command being sent. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "Binding ID of the network interface to send on"
      },
      {
        "type": "string",
        "name": "strData",
        "description": "Data to send out the specified network interface"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SendWOL",
    "signature": "C4:SendWOL(macAddress, port)",
    "description": "Function that enables a Lua driver to broadcast a Wake-On-Lan magic packet. ",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "macAdress",
        "name": "macAddress",
        "description": "MAC address of the device."
      },
      {
        "type": "number",
        "name": "port",
        "description": "Optional. ID of the port the WOL magic packet is broadcast. If omitted, the WOL default port 9 is used.     "
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "NetConnect",
    "signature": "C4:NetConnect(idBinding, nPort, strIPType)",
    "description": "Function used to tell the system to make a connection (static or dynamic). Connections are created using the CreateNetworkConnection API. Further, port-specific configuration can be configured for a connection through the NetPortOptions API. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "Binding ID of the network interface"
      },
      {
        "type": "number",
        "name": "nPort",
        "description": "Network port to connect to. If NetPortOptions API is used with NetConnect, the remaining parameters are       ignored."
      },
      {
        "type": "string",
        "name": "strIPType",
        "description": "IP Type. Optional. TCP is assumed or UDP or MULTICAST"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "NetDisconnect",
    "signature": "C4:NetDisconnect(idBinding, nPort)",
    "description": "Function called from DriverWorks driver to disconnect from a specific idBinding and nPort. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "Binding ID of the network interface to disconnect from"
      },
      {
        "type": "number",
        "name": "nPort",
        "description": "Network port."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "NetPortOptions",
    "signature": "C4:NetPortOptions(idBinding, nPort, strIPType, tPortParams)",
    "description": "Function to configure a connection's Port settings. The use of this API is contingent upon the use of the CreateNetworkConnection and NetConnect APIs. Connections are created using the CreateNetworkConnection API and Connections are made using the NetConnect API. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.8.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "Binding ID of the network interface to disconnect from"
      },
      {
        "type": "number",
        "name": "nPort",
        "description": "Network port."
      },
      {
        "type": "string",
        "name": "strIPType",
        "description": "Network Connection type. For example, TCP/SSL or UDP."
      },
      {
        "type": "table",
        "name": "tPortParams",
        "description": "lua table of Key/Value pairs that contain all of the parameters for the specific Port. These parameters       include:"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "OnNetworkBindingChanged",
    "signature": "C4:OnNetworkBindingChanged(idBinding, bIsBound)",
    "description": "Function called by Director when a network connection has been addressed (â€˜identifiedâ€™ on Network Connections Page) or unaddressed (â€˜disconnectâ€™).",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idBinding",
        "description": "ID of the network binding whose status has changed"
      },
      {
        "type": "bool",
        "name": "bIsBound",
        "description": "Whether the network binding has a bound address"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Sample TCP Connection",
    "signature": "C4:CreateServer(nPort, strDelimiter, bUseUDP)",
    "description": "To the right is a sample of a Driver's Connection XML. It shows the XML entries required for a static TCP type connection:",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "number",
        "name": "nPort",
        "description": "TCP Socket to listen for connections on. See note below for additional port information."
      },
      {
        "type": "string",
        "name": "strDelimiter",
        "description": "Optional: Delimiter to separate messages. If no delimiter is specified, packets are delivered as they       are received."
      },
      {
        "type": "bool",
        "name": "bUseUDP",
        "description": "bUseUDP: When True, the server socket connection is a UDP server socket. The default is TCP."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Sample SSL (Multi-Port) Connection",
    "signature": "C4:CreateServer(nPort, strDelimiter, bUseUDP)",
    "description": "To the right is a sample of a Driver's Connection XML. It shows the XML entries required for a static SSL type connection using two ports (443 and 444):",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "number",
        "name": "nPort",
        "description": "TCP Socket to listen for connections on. See note below for additional port information."
      },
      {
        "type": "string",
        "name": "strDelimiter",
        "description": "Optional: Delimiter to separate messages. If no delimiter is specified, packets are delivered as they       are received."
      },
      {
        "type": "bool",
        "name": "bUseUDP",
        "description": "bUseUDP: When True, the server socket connection is a UDP server socket. The default is TCP."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Overview",
    "signature": "C4:CreateServer(nPort, strDelimiter, bUseUDP)",
    "description": "This section describes the Server Sockets feature delivered in the 2.1.0 (and later) release of Control4â€™s System Software. The Server Sockets interface is a lightweight way for drivers to be to accept incoming socket connections, and process them easily.",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "number",
        "name": "nPort",
        "description": "TCP Socket to listen for connections on. See note below for additional port information."
      },
      {
        "type": "string",
        "name": "strDelimiter",
        "description": "Optional: Delimiter to separate messages. If no delimiter is specified, packets are delivered as they       are received."
      },
      {
        "type": "bool",
        "name": "bUseUDP",
        "description": "bUseUDP: When True, the server socket connection is a UDP server socket. The default is TCP."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "CreateServer",
    "signature": "C4:CreateServer(nPort, strDelimiter, bUseUDP)",
    "description": "Creates a Server Socket, that listens on port nPort, and sends messages to the driver upon receipt of the delimiter, strDelimiter (or upon timeout). This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "number",
        "name": "nPort",
        "description": "TCP Socket to listen for connections on. See note below for additional port information."
      },
      {
        "type": "string",
        "name": "strDelimiter",
        "description": "Optional: Delimiter to separate messages. If no delimiter is specified, packets are delivered as they       are received."
      },
      {
        "type": "bool",
        "name": "bUseUDP",
        "description": "bUseUDP: When True, the server socket connection is a UDP server socket. The default is TCP."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "DestroyServer",
    "signature": "C4:DestroyServer(nPort)",
    "description": "Destroys any Server Sockets. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "number",
        "name": "nPort",
        "description": "TCP Port to stop listening on (Should be the same as initially given)"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "ServerSend",
    "signature": "C4:ServerSend(nHandle, strData)",
    "description": "This function is used to send data over an open Server Socket connection. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "number",
        "name": "nHandle",
        "description": "Server Socket handle received in OnServerConnectionStatusChanged. Replies to or disconnects this same       Server Socket."
      },
      {
        "type": "string",
        "name": "strData",
        "description": "Data to be sent over the open Server Socket connection."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "ServerCloseClient",
    "signature": "C4:ServerCloseClient(nHandle)",
    "description": "Close a previously open Server Socket connection. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.10.0",
    "parameters": [
      {
        "type": "number",
        "name": "nHandle",
        "description": "Server Socket handle received in OnServerConnectionStatusChanged.     "
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SetTimer",
    "signature": "C4:SetTimer(nDelay, fCallback, bRepeat)",
    "description": "Creates and starts timer. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "nDelay",
        "description": "Numeric value in milliseconds which is the desired timer delay. This value must be greater than 0."
      },
      {
        "type": "function",
        "name": "fCallback",
        "description": "The function to be called when the timer fires. The function signature for non-repeating timers is: function(timer)"
      },
      {
        "type": "bool",
        "name": "bRepeat",
        "description": "bRepeat Optional parameter that, if provided and set to true, the timer will fire repeatedly until canceled."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Cancel",
    "signature": "C4:Cancel()",
    "description": "Cancels a transfer that has been started by a call to the Get(), Post(), Put(), Delete(), or Custom() methods. The C4LuaUrl object cannot be re-used after canceling a transfer. A new instance will need to be created by a call to C4:url().",
    "documentation": null,
    "version": "2.10.5",
    "parameters": [
      {
        "type": "url",
        "name": "url",
        "description": "String of the URL to perform the PUT method on."
      },
      {
        "type": "string",
        "name": "string",
        "description": "String of the request method."
      },
      {
        "type": "string",
        "name": "string",
        "description": "String of the request body to be sent."
      },
      {
        "type": "table",
        "name": "table",
        "description": "A table of request headers and values to be sent."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Custom",
    "signature": "C4:Custom(url, method, data, headers)",
    "description": "Starts a HTTP transfer with a custom request method as specified by the method argument.",
    "documentation": null,
    "version": "2.10.5",
    "parameters": [
      {
        "type": "string",
        "name": "url",
        "description": "String of the URL to perform the method on."
      },
      {
        "type": "string",
        "name": "method",
        "description": "String of the request method."
      },
      {
        "type": "string",
        "name": "data",
        "description": "String of the request body to be sent."
      },
      {
        "type": "table",
        "name": "table",
        "description": "A table of request headers and values to be sent."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Delete",
    "signature": "C4:Delete(url, data, headers)",
    "description": "Starts a HTTP DELETE transfer.",
    "documentation": null,
    "version": "2.10.5",
    "parameters": [
      {
        "type": "string",
        "name": "url",
        "description": "String of the URL to perform the DELETE method on."
      },
      {
        "type": "table",
        "name": "data",
        "description": "A table of request headers and values to be sent."
      },
      {
        "type": null,
        "name": "headers",
        "description": null
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Get",
    "signature": "C4:Get(url, headers)",
    "description": "Starts a HTTP GET transfer.",
    "documentation": null,
    "version": "2.10.5",
    "parameters": [
      {
        "type": "string",
        "name": "url",
        "description": "String of the URL to perform the GET E method on."
      },
      {
        "type": "table",
        "name": "headers",
        "description": "A table of request headers and values to be sent."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "OnBody",
    "signature": "C4:OnBody(func)",
    "description": "Sets a callback function that will be called each time a response body has finished transferring. This function is called after the callback functions set by OnHeaders() and OnBodyChunk() but before the callback function set by OnDone(). Note that this method can only be called before a transfer was started. ",
    "documentation": null,
    "version": "2.10.5",
    "parameters": [
      {
        "type": "function",
        "name": "func",
        "description": "A callback function of type func (transfer, response). Returning true from this function aborts the       transfer."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "OnBodychunk",
    "signature": "C4:OnBodyChunk(func)",
    "description": "Sets a callback function that will be called each time a chunk of the response body has transferred. This does not necessarily correlate to chunks in the context of the HTTP \"chunked\" transfer encoding. This function may be called multiple times for each response, following the callback function set by OnHeaders() and before the callback function set by OnBody() and OnDone(). Note that this method can only be called before a transfer was started. This callback function is not needed for most use-cases.",
    "documentation": null,
    "version": "2.10.5",
    "parameters": [
      {
        "type": "function",
        "name": "func",
        "description": "A callback function of type func (transfer, response, chunk). Returning true from this function aborts       the transfer."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "OnDone",
    "signature": "C4:OnDone(func)",
    "description": "Sets a callback function that will be called when the entire transfer succeeded or failed. It is only called once at the end of the entire transfer regardless of how many responses have been received. Note that this method can only be called before a transfer was started.",
    "documentation": null,
    "version": "2.10.5",
    "parameters": [
      {
        "type": "function",
        "name": "func",
        "description": "A callback function of type func(transfer, responses, errCode, errMsg)."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "OnHeaders",
    "signature": "C4:OnHeaders(func)",
    "description": "Sets a callback function that will be called each time all of the headers of a response have been received but, before the response body has been received. This function may be called multiple times, e.g. due to redirects. Note that this method can only be called before a transfer was started.",
    "documentation": null,
    "version": "2.10.5",
    "parameters": [
      {
        "type": "function",
        "name": "func",
        "description": "A callback function of type func (transfer, response, chunk). Returning true from this function aborts       the transfer."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Post",
    "signature": "C4:Post(url, data, headers)",
    "description": "Starts a HTTP POST transfer.",
    "documentation": null,
    "version": "2.10.5",
    "parameters": [
      {
        "type": "string",
        "name": "url",
        "description": "String of the URL to perform the POST method on."
      },
      {
        "type": "string",
        "name": "string",
        "description": "String of the request body to be sent."
      },
      {
        "type": "table",
        "name": "table",
        "description": "A table of request headers and values to be sent."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "Put",
    "signature": "C4:Put(url, data, headers)",
    "description": "Starts a HTTP POST transfer.",
    "documentation": null,
    "version": "3.0.0",
    "parameters": [
      {
        "type": "string",
        "name": "url",
        "description": "String of the URL to perform the POST method on."
      },
      {
        "type": "string",
        "name": "string",
        "description": "String of the request body to be sent."
      },
      {
        "type": "table",
        "name": "table",
        "description": "A table of request headers and values to be sent."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SetOption",
    "signature": "C4:SetOption(name, value)",
    "description": "Sets one option specified by name to value. Note that this method can only be called before a transfer was started. ",
    "documentation": null,
    "version": "2.10.5",
    "parameters": [
      {
        "type": "string",
        "name": "name",
        "description": "String value of the name of the parameter."
      },
      {
        "type": "bool",
        "name": "value",
        "description": "Value - Boolean value (number or string) of the parameter."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SetOptions",
    "signature": "C4:SetOptions(options)",
    "description": "This API is similar to the SetOption() method, but allows the driver to pass in a table of options and their values. Note that this method can only be called before a transfer was started.",
    "documentation": null,
    "version": "2.10.5",
    "parameters": [
      {
        "type": "table",
        "name": "options",
        "description": "Table of options and their values:"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "TicketId",
    "signature": "C4:TicketId()",
    "description": "Returns the Ticket ID (a number) of a running transfer. If the transfer is not running, the value 0 is returned.",
    "documentation": null,
    "version": "2.10.5",
    "parameters": [],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "A number identifying the running transfer, otherwise 0."
      }
    ],
    "deprecated": false
  },
  {
    "label": "AddVariable",
    "signature": "C4:AddVariable(identifier, strValue, strVarType, [bReadOnly], [bHidden])",
    "description": "Function called from a DriverWorks driver to create a Control4 variable for the driver. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "str/num",
        "name": "identifier",
        "description": "A string or number that uniquely identifies the variable to be added. If a number it must be greater       than zero."
      },
      {
        "type": "string",
        "name": "strValue",
        "description": "Initial value of Control4 variable"
      },
      {
        "type": "string",
        "name": "strVarType",
        "description": "String specifying the Variable Type."
      },
      {
        "type": "bool",
        "name": "bReadOnly",
        "description": "ReadOnly: Optional, defaults to FALSE"
      },
      {
        "type": "bool",
        "name": "bHidden",
        "description": "Hidden: Optional, defaults to FALSE. A flag indicating whether the variable is hidden."
      }
    ],
    "returns": [
      {
        "type": "True",
        "name": "True",
        "description": "Indicates that the variable was added successfully."
      },
      {
        "type": "ID",
        "name": "ID",
        "description": "ID of the variable that was added."
      },
      {
        "type": "False",
        "name": "False",
        "description": "Indicates that the variable could not be added. Failure generally occurs when either the name or ID is       not unique."
      }
    ],
    "deprecated": false
  },
  {
    "label": "DeleteVariable",
    "signature": "C4:DeleteVariable(identifier)",
    "description": "Function called from a DriverWorks driver to delete a Control4 variable for the driver. This API should not be invoked during OnDriverInit",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "str/num",
        "name": "identifier",
        "description": "A str or num that uniquely identifies the variable to be deleted."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetVariable",
    "signature": "C4:GetVariable(idDevice, idVariable)",
    "description": "Function called by a DriverWorks driver to get the value of a variable. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idDevice",
        "description": "Device ID of the device that owns the specified variable"
      },
      {
        "type": "number",
        "name": "idVariable",
        "description": "Variable ID of the specified variable"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "String Value of the requested variable, nil if not found."
      }
    ],
    "deprecated": false
  },
  {
    "label": "GetDeviceVariable",
    "signature": "C4:GetDeviceVariable(idDevice, idVariable)",
    "description": "Function called by a DriverWorks driver to get the value of another device's variable. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idDevice",
        "description": "Device ID of the device that owns the specified variable"
      },
      {
        "type": "number",
        "name": "idVariable",
        "description": "Variable ID of the specified variable"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "String Value of the requested variable, nil if not found."
      }
    ],
    "deprecated": false
  },
  {
    "label": "SetDeviceVariable",
    "signature": "C4:SetDeviceVariable(DeviceID, variableID, strValue)",
    "description": "Function called from a DriverWorks driver to set the value of another driver or device's variable. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "DeviceID",
        "description": "ID value of the device"
      },
      {
        "type": "number",
        "name": "variableID",
        "description": "ID of variable to set"
      },
      {
        "type": "string",
        "name": "strValue",
        "description": "Value to set variable"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SetVariable",
    "signature": "C4:SetVariable(identifier, strValue)",
    "description": "Function called from a DriverWorks driver to set the value of the current driver's variable. This API should not be invoked during OnDriverInit",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "str/num",
        "name": "identifier",
        "description": "A string or number that uniquely identifies the variable to be set."
      },
      {
        "type": "string",
        "name": "strValue",
        "description": "Value to set variable"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "RegisterVariableListener",
    "signature": "C4:RegisterVariableListener(idDevice, idVariable)",
    "description": "Function called from a DriverWorks driver to set a listener on a particular deviceâ€™s variable. When a listener is set on a variable, whenever the variable changes, the Lua OnWatchedVariableChanged call is called.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idDevice",
        "description": "Device ID of the device that owns the changed variable"
      },
      {
        "type": "number",
        "name": "idVariable",
        "description": "Variable ID of the changed variable"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "UnRegisterAllVariableListeners",
    "signature": "C4:UnregisterAllVariableListeners()",
    "description": "This API unregisters any/all previously registered variable listeners. It takes no arguments and returns nothing. ",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "number",
        "description": "Device ID of the device that owns the requested variable"
      },
      {
        "type": "number",
        "name": "number",
        "description": "Variable ID of the requested variable"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "UnregisterVariableListener",
    "signature": "C4:UnregisterVariableListener(idDevice, idVariable)",
    "description": "Function called from DriverWorks driver to remove a listener on a particular device's variable. Variable changes for the particular Device's Variable will no longer be reported. This API will not work if a variable has not been registered, added or does not exist.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "number",
        "name": "idDevice",
        "description": "Device ID of the device that owns the requested variable"
      },
      {
        "type": "number",
        "name": "idVariable",
        "description": "Variable ID of the requested variable"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "url",
    "signature": "C4:url()",
    "description": "Utilizes a more flexible callback-based object interface. A call to this function returns a C4LuaUrl object that can be set up with various callback functions and options. Once set up, a call to its methods: Get(), Post(), Put(), Delete(), or Custom() initiates the transfer.",
    "documentation": null,
    "version": "2.10.5",
    "parameters": [],
    "deprecated": false
  },
  {
    "label": "urlCancel",
    "signature": "C4:urlCancel(ticketId)",
    "description": "Function to cancel an ongoing transfer. Note that if a transfer is canceled, neither the ReceivedAsync() entry point nor the callback function specified in the C4:url call will be called. Also, the ticketId is only valid from the point the C4:url function is called until either the ReceivedAsync() entry point or the callback function was called. A call to C4:urlCancel() will also invalidate that ticketed. This API should not be invoked during OnDriverInit",
    "documentation": null,
    "version": "2.7.0",
    "parameters": [
      {
        "type": "number",
        "name": "ticketId",
        "description": "Number representing the ticket ID value."
      }
    ],
    "returns": [
      {
        "type": "bool",
        "name": "bool",
        "description": "True if the specified transfer was canceled."
      }
    ],
    "deprecated": false
  },
  {
    "label": "urlCancelAll",
    "signature": "C4:urlCancelAll()",
    "description": "This method cancels all ongoing transfers and returns an array with the ticket ids of the transfers that were canceled. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.8.1",
    "parameters": [],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "urlClearCookies",
    "signature": "C4:urlClearCookies()",
    "description": "Function to clear all cookies from a driver's cookie jar.",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "The number of cookies that were removed."
      }
    ],
    "deprecated": false
  },
  {
    "label": "urlClearSessionCookies",
    "signature": "C4:urlClearSessionCookies()",
    "description": "Function to clear all session cookies from a driver's cookie jar.",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [],
    "returns": [
      {
        "type": "number",
        "name": "number",
        "description": "The number of session cookies (cookies with no expiration time) that were removed"
      }
    ],
    "deprecated": false
  },
  {
    "label": "urlGetCookies",
    "signature": "C4:urlGetCookies(domain)",
    "description": "Function to retrieve cookies from the driver's cookie jar filtered by a specific domain.",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [
      {
        "type": "string",
        "name": "domain",
        "description": "Optional. A specific domain."
      }
    ],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "Table of a map of domain names to a map of cookie names to cookie table objects."
      }
    ],
    "deprecated": false
  },
  {
    "label": "urlGetCookiesForDomain",
    "signature": "C4:urlGetCookiesForDomain(domain)",
    "description": "Function to retrieve cookies from the driver's cookie jar filtered by a specific domain.",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [
      {
        "type": "string",
        "name": "domain",
        "description": "Optional. A specific domain."
      }
    ],
    "returns": [
      {
        "type": "table",
        "name": "table",
        "description": "Table of a map of domain names to a map of cookie names to cookie table objects."
      }
    ],
    "deprecated": false
  },
  {
    "label": "urlGetOption",
    "signature": "C4:urlGetOption (option)",
    "description": "Function to retrieve cookies from the driver's cookie jar filtered by a specific domain.",
    "documentation": null,
    "version": "2.9.0",
    "parameters": [
      {
        "type": "number",
        "name": "option",
        "description": "Returns the number of concurrent transfers allowed per hostbool"
      },
      {
        "type": "bool",
        "name": "bool",
        "description": "Returns whether HTTP pipelining is enabled."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "urlGetTickets",
    "signature": "C4:urlGetTickets()",
    "description": "This method returns an array with the ticket ids of all ongoing transfers. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "2.8.1",
    "parameters": [],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "urlSetOption",
    "signature": "C4:urlSetOption(option, value)",
    "description": "This function changes the option specified in the option argument to the value provided. The options and their respective value parameters can be one of the two defined in the signature section below. This API should not be invoked during OnDriverInit.NOTE: These options apply to both the 'legacy' C4:urlGet / C4:urlPut / C4:urlPost commands, as well as the newer C4:url() functionality.",
    "documentation": null,
    "version": "2.8.1",
    "parameters": [
      {
        "type": "string",
        "name": "option",
        "description": "'max_host_connections' or 'pipelining'."
      },
      {
        "type": "max_host_connections",
        "name": "value",
        "description": "Number of concurrent transfers allowed per host. NOTE: This must be a number from 1-5. Any numbers outside of this range will not be honored, and the current value will be kept."
      },
      {
        "type": "pipelining",
        "name": "value",
        "description": "Sets whether HTTP pipelining should be enabled."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "urlSetProxy",
    "signature": "C4:urlSetProxy(strUrl, nPort, strUsername, strPassword)",
    "description": "This function is to set server related security information that may be needed in future related url calls. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "strUrl",
        "description": "url to be used for supplied credentials bool"
      },
      {
        "type": "number",
        "name": "nPort",
        "description": "port corresponding to the url"
      },
      {
        "type": "string",
        "name": "strUsername",
        "description": "username to be used for the url"
      },
      {
        "type": "string",
        "name": "strPassword",
        "description": "password to be used for the urlfailOnHttpError (boolean) - True/False. Defaults to True."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "urlSetTimeout",
    "signature": "C4:urlSetTimeout(SECONDS)",
    "description": "This function is to set a maximum time value (in seconds) for a transfer operation to take place before a server time out occurs. The value passed in this API is dependent on driver/Director performance. For example, setting this value too low could result in a timeout occurring too quickly resulting in messages missed. Setting it too high could result in lag time and poor user experience. Control4 recommends an initial setting of 20 seconds and adjusting as needed. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "int",
        "name": "SECONDS",
        "description": "number of seconds allowed"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetBlobByName",
    "signature": "C4:(strName)",
    "description": "Returns the un-encoded string containing the firmware update data of the specified BLOB (Binary Large Object). This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "strName",
        "description": "Name of the Binary Large Object to retrieve from the .c4i file."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "GetZigbeeEUID",
    "signature": "C4:GetZigbeeEUID()",
    "description": "Lua function called to retrieve a Zigbee devices user ID. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [],
    "returns": [
      {
        "type": "string",
        "name": "string",
        "description": "String representing the EUID value"
      }
    ],
    "deprecated": false
  },
  {
    "label": "KeepReflashLock",
    "signature": "C4:KeepReflashLock()",
    "description": "If a driver takes longer than a minute to upload the firmware data to the device, it should call C4:KeepReflashLock. This request will maintain the reflash lock while updating. If a driver does not call KeepReflashLock, the Reflash Lock will be revoked after approximately one minute. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "string",
        "description": "Status: OFFLINE, ONLINE, REBOOT, UNKNOWN"
      },
      {
        "type": "string",
        "name": "string",
        "description": "Version"
      },
      {
        "type": "string",
        "name": "string",
        "description": "Skew"
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "SendZigbeePacket",
    "signature": "C4:SendZigbeePacket(strPacket,nProfileID, nClusterID, nGroupID, nSourceEndpoint, ndestinationEndpoint)",
    "description": "This function sends a raw Zigbee packet to a Zigbee Binding. This functionality supports both the current Control 4 (EmberNet) as well as ZigBee Pro 1.1 transports. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [
      {
        "type": "string",
        "name": "strPacket",
        "description": "ZigBee supported command packet containing user data."
      },
      {
        "type": "number",
        "name": "nProfileID",
        "description": "Profile ID associated with the data packet"
      },
      {
        "type": "number",
        "name": "nClusterID",
        "description": "Source Cluster library ID included within the Profile"
      },
      {
        "type": "number",
        "name": "nGroupID",
        "description": "Zigbee device group ID"
      },
      {
        "type": "number",
        "name": "nSourceEndpoint",
        "description": "Endpoint designated as the source of the data packet delivery."
      },
      {
        "type": "number",
        "name": "ndestinationEndpoint",
        "description": "Endpoint designated as the recipient of the data packet delivery."
      }
    ],
    "returns": [],
    "deprecated": false
  },
  {
    "label": "ReleaseReflashLock",
    "signature": "C4:ReleaseReflashLock()",
    "description": "Function to terminate the request for firmware data upon completion of update. This API should not be invoked during OnDriverInit.",
    "documentation": null,
    "version": "1.6.0",
    "parameters": [],
    "returns": [],
    "deprecated": false
  }
]